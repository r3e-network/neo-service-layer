using System;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Moq;
using NeoServiceLayer.Tee.Host.Exceptions;
using NeoServiceLayer.Tee.Host.Tests.Mocks;
using Xunit;

namespace NeoServiceLayer.Tee.Host.Tests
{
    public class OpenEnclaveInterfaceTests
    {
        private readonly Mock<ILogger<OpenEnclaveInterface>> _loggerMock;

        public OpenEnclaveInterfaceTests()
        {
            _loggerMock = new Mock<ILogger<OpenEnclaveInterface>>();
        }

        [Fact]
        public void Constructor_WithNullLogger_ThrowsArgumentNullException()
        {
            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => new OpenEnclaveInterface(null, "enclave.signed.so"));
        }

        [Fact]
        public void Constructor_WithNullEnclavePath_ThrowsArgumentException()
        {
            // Act & Assert
            Assert.Throws<ArgumentException>(() => new OpenEnclaveInterface(_loggerMock.Object, null));
        }

        [Fact]
        public void Constructor_WithEmptyEnclavePath_ThrowsArgumentException()
        {
            // Act & Assert
            Assert.Throws<ArgumentException>(() => new OpenEnclaveInterface(_loggerMock.Object, string.Empty));
        }

        [Fact]
        public void GetRandomBytes_WithNegativeLength_ThrowsArgumentOutOfRangeException()
        {
            // Arrange
            var interface_mock = new OpenEnclaveInterface(_loggerMock.Object, "enclave.signed.so");

            // Act & Assert
            Assert.Throws<ArgumentOutOfRangeException>(() => interface_mock.GetRandomBytes(-1));
        }

        [Fact]
        public void GetRandomBytes_WithZeroLength_ThrowsArgumentOutOfRangeException()
        {
            // Arrange
            var interface_mock = new OpenEnclaveInterface(_loggerMock.Object, "enclave.signed.so");

            // Act & Assert
            Assert.Throws<ArgumentOutOfRangeException>(() => interface_mock.GetRandomBytes(0));
        }

        [Fact]
        public void SignData_WithNullData_ThrowsArgumentNullException()
        {
            // Arrange
            var interface_mock = new OpenEnclaveInterface(_loggerMock.Object, "enclave.signed.so");

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => interface_mock.SignData(null));
        }

        [Fact]
        public void VerifySignature_WithNullData_ThrowsArgumentNullException()
        {
            // Arrange
            var interface_mock = new OpenEnclaveInterface(_loggerMock.Object, "enclave.signed.so");

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => interface_mock.VerifySignature(null, new byte[10]));
        }

        [Fact]
        public void VerifySignature_WithNullSignature_ThrowsArgumentNullException()
        {
            // Arrange
            var interface_mock = new OpenEnclaveInterface(_loggerMock.Object, "enclave.signed.so");

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => interface_mock.VerifySignature(new byte[10], null));
        }

        [Fact]
        public void SealData_WithNullData_ThrowsArgumentNullException()
        {
            // Arrange
            var interface_mock = new OpenEnclaveInterface(_loggerMock.Object, "enclave.signed.so");

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => interface_mock.SealData(null));
        }

        [Fact]
        public void UnsealData_WithNullSealedData_ThrowsArgumentNullException()
        {
            // Arrange
            var interface_mock = new OpenEnclaveInterface(_loggerMock.Object, "enclave.signed.so");

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => interface_mock.UnsealData(null));
        }

        [Fact]
        public async Task ExecuteJavaScriptAsync_WithNullCode_ThrowsArgumentNullException()
        {
            // Arrange
            var interface_mock = new OpenEnclaveInterface(_loggerMock.Object, "enclave.signed.so");

            // Act & Assert
            await Assert.ThrowsAsync<ArgumentNullException>(() => interface_mock.ExecuteJavaScriptAsync(null, "{}", "{}", "function1", "user1"));
        }

        [Fact]
        public async Task ExecuteJavaScriptAsync_WithNullInput_ThrowsArgumentNullException()
        {
            // Arrange
            var interface_mock = new OpenEnclaveInterface(_loggerMock.Object, "enclave.signed.so");

            // Act & Assert
            await Assert.ThrowsAsync<ArgumentNullException>(() => interface_mock.ExecuteJavaScriptAsync("code", null, "{}", "function1", "user1"));
        }

        [Fact]
        public async Task ExecuteJavaScriptAsync_WithNullSecrets_ThrowsArgumentNullException()
        {
            // Arrange
            var interface_mock = new OpenEnclaveInterface(_loggerMock.Object, "enclave.signed.so");

            // Act & Assert
            await Assert.ThrowsAsync<ArgumentNullException>(() => interface_mock.ExecuteJavaScriptAsync("code", "{}", null, "function1", "user1"));
        }

        [Fact]
        public async Task ExecuteJavaScriptAsync_WithNullFunctionId_ThrowsArgumentNullException()
        {
            // Arrange
            var interface_mock = new OpenEnclaveInterface(_loggerMock.Object, "enclave.signed.so");

            // Act & Assert
            await Assert.ThrowsAsync<ArgumentNullException>(() => interface_mock.ExecuteJavaScriptAsync("code", "{}", "{}", null, "user1"));
        }

        [Fact]
        public async Task ExecuteJavaScriptAsync_WithNullUserId_ThrowsArgumentNullException()
        {
            // Arrange
            var interface_mock = new OpenEnclaveInterface(_loggerMock.Object, "enclave.signed.so");

            // Act & Assert
            await Assert.ThrowsAsync<ArgumentNullException>(() => interface_mock.ExecuteJavaScriptAsync("code", "{}", "{}", "function1", null));
        }
    }
}
