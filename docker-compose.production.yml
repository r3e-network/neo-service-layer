version: '3.8'

x-common-variables: &common-variables
  ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
  Consul__Address: http://consul:8500
  Consul__Datacenter: dc1
  # Database connection using environment variables
  ConnectionStrings__DefaultConnection: Host=${DB_HOST};Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD};Pooling=true;MinPoolSize=5;MaxPoolSize=100
  # Redis with password from environment
  Redis__Configuration: ${REDIS_HOST}:${REDIS_PORT},password=${REDIS_PASSWORD},ssl=${REDIS_SSL:-false},abortConnect=false
  # RabbitMQ with secure credentials
  RabbitMQ__HostName: ${RABBITMQ_HOST}
  RabbitMQ__UserName: ${RABBITMQ_USER}
  RabbitMQ__Password: ${RABBITMQ_PASSWORD}
  # JWT configuration from environment
  Jwt__SecretKey: ${JWT_SECRET_KEY}
  Jwt__Issuer: ${JWT_ISSUER}
  Jwt__Audience: ${JWT_AUDIENCE}
  # Security settings
  Security__RequireHttps: true
  Security__EnableApiKeyAuthentication: ${ENABLE_API_KEY_AUTH:-false}
  # Monitoring
  OpenTelemetry__Exporters__Jaeger__Enabled: true
  OpenTelemetry__Exporters__Jaeger__Endpoint: http://jaeger:14268/api/traces

x-service-defaults: &service-defaults
  restart: unless-stopped
  networks:
    - neo-network
  environment:
    <<: *common-variables
  depends_on:
    - consul
    - postgres
    - redis
    - rabbitmq
  deploy:
    resources:
      limits:
        memory: 512M
      reservations:
        memory: 256M
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost/health"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 40s

services:
  # Infrastructure Services
  consul:
    image: hashicorp/consul:1.17
    container_name: neo-consul
    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0 -encrypt=${CONSUL_ENCRYPT_KEY}
    ports:
      - "${CONSUL_PORT:-8500}:8500"
      - "8600:8600/udp"
    networks:
      - neo-network
    volumes:
      - consul_data:/consul/data
      - ./config/consul:/consul/config:ro
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_HTTP_TOKEN=${CONSUL_HTTP_TOKEN}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:16-alpine
    container_name: neo-postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init:/docker-entrypoint-initdb.d:ro
    networks:
      - neo-network
    ports:
      - "${DB_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: neo-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --maxmemory ${REDIS_MAX_MEMORY:-2gb}
      --maxmemory-policy ${REDIS_EVICTION_POLICY:-allkeys-lru}
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - neo-network
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: neo-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST:-/}
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro
    networks:
      - neo-network
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: neo-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    networks:
      - neo-network
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana:10.2.3
    container_name: neo-grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - neo-network
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: neo-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - jaeger_data:/badger
    networks:
      - neo-network
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "14268:14268"
      - "4317:4317"
      - "4318:4318"
    restart: unless-stopped

  # API Gateway with HTTPS
  api-gateway:
    build:
      context: .
      dockerfile: docker/microservices/gateway/Dockerfile
      args:
        - BUILD_CONFIGURATION=Release
    container_name: neo-api-gateway
    <<: *service-defaults
    ports:
      - "${API_HTTP_PORT:-80}:80"
      - "${API_HTTPS_PORT:-443}:443"
    environment:
      <<: *common-variables
      SERVICE_NAME: ApiGateway
      SERVICE_TYPE: Gateway
      ASPNETCORE_URLS: https://+:443;http://+:80
      ASPNETCORE_HTTPS_PORT: 443
      ASPNETCORE_Kestrel__Certificates__Default__Path: /https/certificate.pfx
      ASPNETCORE_Kestrel__Certificates__Default__Password: ${CERTIFICATE_PASSWORD}
    volumes:
      - ./certificates:/https:ro
    depends_on:
      consul:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Core Services (example for one service, repeat pattern for others)
  notification-service:
    build:
      context: .
      dockerfile: docker/microservices/services/notification/Dockerfile
      args:
        - BUILD_CONFIGURATION=Release
    container_name: neo-notification-service
    <<: *service-defaults
    environment:
      <<: *common-variables
      SERVICE_NAME: NotificationService
      SERVICE_TYPE: Notification
      Email__SmtpHost: ${SMTP_HOST}
      Email__SmtpPort: ${SMTP_PORT}
      Email__SmtpUsername: ${SMTP_USERNAME}
      Email__SmtpPassword: ${SMTP_PASSWORD}
      Email__UseSsl: ${SMTP_USE_SSL:-true}
    deploy:
      replicas: ${NOTIFICATION_SERVICE_REPLICAS:-2}
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

networks:
  neo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  consul_data:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  jaeger_data: