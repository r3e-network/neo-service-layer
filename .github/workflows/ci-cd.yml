name: 🚀 Neo Service Layer CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean
      skip_docker:
        description: 'Skip Docker build'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20'
  RUST_VERSION: 'stable'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  COVERAGE_THRESHOLD: 75
  BRANCH_COVERAGE_THRESHOLD: 70
  NEO_ALLOW_SGX_SIMULATION: true

jobs:
  # 🏗️ Build and Test Matrix Job
  build-and-test:
    name: 🏗️ Build & Test (${{ matrix.configuration }})
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: ${{ !github.event.inputs.skip_tests }}
    
    strategy:
      fail-fast: false
      matrix:
        configuration: [Debug, Release]
        include:
          - configuration: Debug
            collect_coverage: false
            run_integration: false
          - configuration: Release
            collect_coverage: true
            run_integration: true
    
    outputs:
      test-results-available: ${{ steps.test-check.outputs.available }}
      coverage-results-available: ${{ steps.coverage-check.outputs.available }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🔧 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: rustfmt, clippy

    - name: 🚀 Cache .NET dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', 'global.json', '**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: 🚀 Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src/Tee/NeoServiceLayer.Tee.Enclave/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: 🚀 Cache Node.js dependencies
      uses: actions/cache@v4
      if: hashFiles('**/package-lock.json') != ''
      with:
        path: |
          ~/.npm
          node_modules
          contracts/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: 🔒 Install SGX SDK (Simulation Mode)
      run: |
        echo "::group::Installing Intel SGX SDK for CI simulation"
        wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | sudo apt-key add -
        echo "deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/intel-sgx.list
        sudo apt-get update
        sudo apt-get install -y libsgx-urts libsgx-enclave-common-dev libsgx-dcap-ql-dev
        echo "SGX_MODE=SIM" >> $GITHUB_ENV
        echo "::endgroup::"

    - name: 📦 Restore dependencies
      run: |
        echo "::group::Restoring .NET dependencies"
        dotnet restore NeoServiceLayer.sln --verbosity minimal
        echo "::endgroup::"
        
        echo "::group::Installing Solidity dependencies"
        if [ -d "contracts" ] && [ -f "contracts/package.json" ]; then
          cd contracts
          if [ -f "package-lock.json" ]; then
            npm ci --silent
          else
            npm install --silent
          fi
          echo "Solidity dependencies installed"
        else
          echo "No contracts directory or package.json found, skipping Solidity dependencies"
        fi
        echo "::endgroup::"

    - name: 🏗️ Build solution
      run: |
        echo "::group::Building solution (${{ matrix.configuration }})"
        dotnet build NeoServiceLayer.sln \
          --configuration ${{ matrix.configuration }} \
          --no-restore \
          --verbosity minimal \
          --property WarningLevel=0 \
          --property TreatWarningsAsErrors=false
        echo "::endgroup::"

    - name: 🧪 Run unit tests  
      if: ${{ !github.event.inputs.skip_tests }}
      env:
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        NEO_ALLOW_SGX_SIMULATION: true
        SGX_MODE: SIM
      run: |
        echo "::group::Running unit tests (${{ matrix.configuration }})"
        dotnet test NeoServiceLayer.sln \
          --configuration ${{ matrix.configuration }} \
          --no-build \
          --verbosity minimal \
          --logger trx \
          --results-directory TestResults/Unit/ \
          ${{ matrix.collect_coverage && '--collect:"XPlat Code Coverage" --settings tests/codecoverage.runsettings' || '' }} \
          --filter "Category!=Integration&Category!=Performance"
        echo "::endgroup::"

    - name: 🔗 Run integration tests
      if: ${{ matrix.run_integration && !github.event.inputs.skip_tests }}
      env:
        SGX_MODE: SIM
        TEST_ENVIRONMENT: CI
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        NEO_ALLOW_SGX_SIMULATION: true
      run: |
        echo "::group::Running integration tests"
        dotnet test tests/Integration/ \
          --configuration ${{ matrix.configuration }} \
          --no-build \
          --verbosity minimal \
          --logger trx \
          --results-directory TestResults/Integration/ \
          ${{ matrix.collect_coverage && '--collect:"XPlat Code Coverage"' || '' }}
        echo "::endgroup::"

    - name: 📊 Generate coverage report
      if: ${{ matrix.collect_coverage && !github.event.inputs.skip_tests }}
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
      with:
        reports: 'TestResults/**/coverage.cobertura.xml'
        targetdir: 'TestResults/CoverageReport'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura;JsonSummary;Badges'
        verbosity: 'Warning'

    - name: 📈 Check coverage thresholds
      id: coverage-check
      if: ${{ matrix.collect_coverage && !github.event.inputs.skip_tests }}
      run: |
        if [ -f "TestResults/CoverageReport/Summary.json" ]; then
          echo "::group::Coverage Analysis"
          COVERAGE=$(cat TestResults/CoverageReport/Summary.json | jq -r '.coverage.linecoverage // 0')
          BRANCH_COVERAGE=$(cat TestResults/CoverageReport/Summary.json | jq -r '.coverage.branchcoverage // 0')
          
          echo "Line coverage: ${COVERAGE}%"
          echo "Branch coverage: ${BRANCH_COVERAGE}%"
          echo "line-coverage=${COVERAGE}" >> $GITHUB_OUTPUT
          echo "branch-coverage=${BRANCH_COVERAGE}" >> $GITHUB_OUTPUT
          echo "available=true" >> $GITHUB_OUTPUT
          
          # Check thresholds
          if (( $(echo "${COVERAGE} >= ${COVERAGE_THRESHOLD}" | bc -l) )) && (( $(echo "${BRANCH_COVERAGE} >= ${BRANCH_COVERAGE_THRESHOLD}" | bc -l) )); then
            echo "coverage-passed=true" >> $GITHUB_OUTPUT
            echo "✅ Code coverage meets threshold: ${COVERAGE}% line, ${BRANCH_COVERAGE}% branch"
          else
            echo "coverage-passed=false" >> $GITHUB_OUTPUT
            echo "❌ Coverage below threshold: ${COVERAGE}% line (>=${COVERAGE_THRESHOLD}%), ${BRANCH_COVERAGE}% branch (>=${BRANCH_COVERAGE_THRESHOLD}%)"
          fi
          echo "::endgroup::"
        else
          echo "⚠️ No coverage report found"
          echo "available=false" >> $GITHUB_OUTPUT
          echo "coverage-passed=false" >> $GITHUB_OUTPUT
        fi

    - name: 📤 Upload test results
      uses: actions/upload-artifact@v4
      if: ${{ always() && !github.event.inputs.skip_tests }}
      with:
        name: test-results-${{ matrix.configuration }}-${{ github.run_number }}
        path: TestResults/
        retention-days: 30
        compression-level: 6

    - name: 📈 Set test check outputs
      id: test-check
      if: ${{ !github.event.inputs.skip_tests }}
      run: |
        echo "available=true" >> $GITHUB_OUTPUT

    - name: 🎯 Upload coverage to Codecov
      if: ${{ matrix.collect_coverage && !github.event.inputs.skip_tests }}
      uses: codecov/codecov-action@v4
      with:
        files: TestResults/CoverageReport/Cobertura.xml
        flags: unittests,integration
        name: neo-service-layer-${{ matrix.configuration }}
        fail_ci_if_error: false
        verbose: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: 💬 Comment PR with coverage
      if: ${{ github.event_name == 'pull_request' && matrix.collect_coverage && !github.event.inputs.skip_tests }}
      uses: 5monkeys/cobertura-action@master
      with:
        path: TestResults/CoverageReport/Cobertura.xml
        minimum_coverage: ${{ env.COVERAGE_THRESHOLD }}
        fail_below_minimum: false
        show_missing: true
        show_line: true
        show_branch: true
        show_class_names: true

  # 🛡️ Security Scanning Job (Dependency Check Only)
  security-scan:
    name: 🛡️ Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🔍 Run dependency vulnerability scan
      run: |
        echo "::group::Dependency Security Scan"
        dotnet list NeoServiceLayer.sln package --vulnerable --include-transitive 2>&1 | tee vulnerability-scan.txt
        
        if grep -i "critical\|high" vulnerability-scan.txt; then
          echo "❌ Critical or High vulnerabilities found!"
          cat vulnerability-scan.txt
          echo "::error::Security vulnerabilities detected. Please review and fix before merging."
          exit 1
        else
          echo "✅ No critical vulnerabilities found"
        fi
        echo "::endgroup::"

    - name: 🔍 OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      id: depcheck
      with:
        project: 'Neo Service Layer'
        path: '.'
        format: 'SARIF'
        out: 'reports'
        args: >
          --failOnCVSS 7
          --enableRetired
          --suppression dependency-check-suppressions.xml

    - name: 📤 Upload OWASP results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/dependency-check-report.sarif

  # 🐳 Docker Build Job
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-and-test]
    if: ${{ !github.event.inputs.skip_docker && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') }}
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # 🚀 Performance Testing Job
  performance-test:
    name: 🚀 Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-and-test]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🚀 Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: 📦 Restore and build
      run: |
        dotnet restore NeoServiceLayer.sln
        dotnet build NeoServiceLayer.sln --configuration Release --no-restore

    - name: 🏃‍♂️ Run performance tests
      env:
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        NEO_ALLOW_SGX_SIMULATION: true
        SGX_MODE: SIM
      run: |
        echo "::group::Performance Tests"
        dotnet test tests/Performance/ \
          --configuration Release \
          --no-build \
          --verbosity minimal \
          --logger trx \
          --results-directory TestResults/Performance/ \
          --filter "Category=Performance"
        echo "::endgroup::"

    - name: 📊 Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results-${{ github.run_number }}
        path: TestResults/Performance/
        retention-days: 7

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-and-test, security-scan, docker-build]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' }}
    environment: staging
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        # Add actual deployment logic here
        echo "✅ Staging deployment complete"

    - name: 🧪 Run smoke tests
      run: |
        echo "🧪 Running staging smoke tests..."
        # Add smoke test logic here
        echo "✅ Smoke tests passed"

  # 🚀 Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-and-test, security-scan, docker-build, performance-test]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    environment: production
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        # Add actual deployment logic here
        echo "✅ Production deployment complete"

    - name: 🧪 Run production health checks
      run: |
        echo "🧪 Running production health checks..."
        # Add health check logic here
        echo "✅ Production health checks passed"

    - name: 📢 Notify deployment success
      if: success()
      run: |
        echo "📢 Production deployment successful!"
        # Add notification logic (Slack, email, etc.)

  # 📢 Notification Job
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [build-and-test, security-scan, docker-build]
    if: always()
    
    steps:
    - name: 📊 Workflow Summary
      run: |
        echo "## 🚀 Neo Service Layer CI/CD Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Test | ${{ needs.build-and-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅ Passed' || needs.docker-build.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📋 Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY