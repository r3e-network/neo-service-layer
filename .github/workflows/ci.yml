name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      use_dockerhub:
        description: 'Use Docker Hub image instead of building locally'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      contents: read
      pull-requests: write
      issues: write
      checks: write
      statuses: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        dotnet-install-dir: ${{ github.workspace }}/.dotnet
      env:
        DOTNET_INSTALL_DIR: ${{ github.workspace }}/.dotnet

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore NeoServiceLayer.sln

    - name: Build solution
      run: dotnet build NeoServiceLayer.sln --configuration Release --no-restore --verbosity minimal

    - name: Run unit tests
      run: |
        dotnet test NeoServiceLayer.sln \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --logger "console;verbosity=normal" \
          --collect:"XPlat Code Coverage" \
          --settings config/coverlet.runsettings \
          --results-directory ./TestResults \
          --filter "FullyQualifiedName!~Performance"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./TestResults/**/*.trx

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: ./TestResults/**/coverage.cobertura.xml

    - name: Generate coverage report
      if: always()
      run: |
        export PATH="$HOME/.dotnet/tools:$PATH"
        dotnet tool install -g dotnet-reportgenerator-globaltool || true
        if [ -f "./TestResults/**/coverage.cobertura.xml" ] || ls ./TestResults/**/coverage.cobertura.xml 1> /dev/null 2>&1; then
          reportgenerator \
            -reports:"./TestResults/**/coverage.cobertura.xml" \
            -targetdir:"./CoverageReport" \
            -reporttypes:"Html;Badges;TextSummary;MarkdownSummaryGithub" \
            -verbosity:Warning
        else
          echo "No coverage files found, creating empty report"
          mkdir -p ./CoverageReport
          echo "No coverage data available" > ./CoverageReport/SummaryGithub.md
        fi

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-html-report
        path: ./CoverageReport/

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: ./CoverageReport/SummaryGithub.md

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build-and-test
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        dotnet-install-dir: ${{ github.workspace }}/.dotnet
      env:
        DOTNET_INSTALL_DIR: ${{ github.workspace }}/.dotnet

    - name: Restore dependencies
      run: dotnet restore NeoServiceLayer.sln

    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee security-scan.log
        if grep -q "has the following vulnerable packages" security-scan.log; then
          echo "::warning::Vulnerable packages detected"
          cat security-scan.log
        fi

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: security-scan.log

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-and-test
    if: always()
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: ./TestResults

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: ./TestResults

    - name: Analyze test results
      run: |
        echo "## Quality Gates Analysis" >> $GITHUB_STEP_SUMMARY
        
        # Count test result files
        TRX_FILES=$(find ./TestResults -name "*.trx" | wc -l)
        echo "- Test result files found: $TRX_FILES" >> $GITHUB_STEP_SUMMARY
        
        # Check for coverage files
        COVERAGE_FILES=$(find ./TestResults -name "coverage.cobertura.xml" | wc -l)
        echo "- Coverage files found: $COVERAGE_FILES" >> $GITHUB_STEP_SUMMARY
        
        # Basic quality gates
        if [ $TRX_FILES -gt 0 ]; then
          echo "‚úÖ Test execution: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Test execution: FAILED" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        if [ $COVERAGE_FILES -gt 0 ]; then
          echo "‚úÖ Coverage collection: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è Coverage collection: WARNING" >> $GITHUB_STEP_SUMMARY
        fi

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        dotnet-install-dir: ${{ github.workspace }}/.dotnet
      env:
        DOTNET_INSTALL_DIR: ${{ github.workspace }}/.dotnet

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore NeoServiceLayer.sln

    - name: Publish application for Docker
      run: |
        echo "Publishing .NET application for Docker..."
        dotnet publish src/Web/NeoServiceLayer.Web/NeoServiceLayer.Web.csproj \
          -c Release \
          -o src/Web/NeoServiceLayer.Web/bin/Release/net9.0/publish/ \
          --verbosity minimal

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Use Docker Hub image
      if: ${{ github.event.inputs.use_dockerhub == 'true' }}
      run: |
        echo "üì• Pulling latest image from Docker Hub..."
        docker pull jinghuiliao/neo-service-layer:latest
        docker tag jinghuiliao/neo-service-layer:latest neo-service-layer:test
        echo "‚úÖ Docker Hub image ready for testing"

    - name: Build Docker image (minimal approach)
      if: ${{ github.event.inputs.use_dockerhub != 'true' }}
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.minimal
        push: false
        tags: neo-service-layer:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image functionality
      run: |
        echo "Testing Docker image functionality..."
        
        if [ "${{ github.event.inputs.use_dockerhub }}" = "true" ]; then
          echo "Testing Docker Hub image"
        else
          echo "Testing locally built minimal image"
        fi
        
        # Run container for testing
        docker run -d \
          --name neo-service-test \
          -p 8080:5000 \
          -e ASPNETCORE_ENVIRONMENT=Development \
          -e ASPNETCORE_URLS="http://+:5000" \
          -e JWT_SECRET_KEY="test-jwt-secret-key-for-ci-pipeline-32chars" \
          -e NEO_ALLOW_SGX_SIMULATION=true \
          neo-service-layer:test
        
        # Wait for startup
        sleep 15
        
        # Test health endpoint
        for i in {1..8}; do
          if curl -f http://localhost:8080/health; then
            echo "‚úÖ Health check passed"
            break
          fi
          if [ $i -eq 8 ]; then
            echo "‚ùå Health check failed"
            docker logs neo-service-test
            exit 1
          fi
          echo "Waiting for application startup... ($i/8)"
          sleep 5
        done
        
        # Test API info endpoint
        curl -f http://localhost:8080/api/info
        echo "‚úÖ API endpoints working correctly"
        
        # Cleanup
        docker stop neo-service-test
        docker rm neo-service-test
        docker rmi neo-service-layer:test
        
        echo "‚úÖ Docker image test completed successfully"