name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore NeoServiceLayer.sln

    - name: Build solution
      run: dotnet build NeoServiceLayer.sln --configuration Release --no-restore --verbosity minimal

    - name: Run unit tests
      run: |
        dotnet test NeoServiceLayer.sln \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --logger "console;verbosity=normal" \
          --collect:"XPlat Code Coverage" \
          --settings coverlet.runsettings \
          --results-directory ./TestResults \
          --filter "FullyQualifiedName!~Performance"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./TestResults/**/*.trx

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: ./TestResults/**/coverage.cobertura.xml

    - name: Generate coverage report
      if: always()
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator \
          -reports:"./TestResults/**/coverage.cobertura.xml" \
          -targetdir:"./CoverageReport" \
          -reporttypes:"Html;Badges;TextSummary;MarkdownSummaryGithub" \
          -verbosity:Warning

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-html-report
        path: ./CoverageReport/

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: ./CoverageReport/SummaryGithub.md

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore NeoServiceLayer.sln

    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee security-scan.log
        if grep -q "has the following vulnerable packages" security-scan.log; then
          echo "::warning::Vulnerable packages detected"
          cat security-scan.log
        fi

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: security-scan.log

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: ./TestResults

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: ./TestResults

    - name: Analyze test results
      run: |
        echo "## Quality Gates Analysis" >> $GITHUB_STEP_SUMMARY
        
        # Count test result files
        TRX_FILES=$(find ./TestResults -name "*.trx" | wc -l)
        echo "- Test result files found: $TRX_FILES" >> $GITHUB_STEP_SUMMARY
        
        # Check for coverage files
        COVERAGE_FILES=$(find ./TestResults -name "coverage.cobertura.xml" | wc -l)
        echo "- Coverage files found: $COVERAGE_FILES" >> $GITHUB_STEP_SUMMARY
        
        # Basic quality gates
        if [ $TRX_FILES -gt 0 ]; then
          echo "✅ Test execution: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Test execution: FAILED" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        if [ $COVERAGE_FILES -gt 0 ]; then
          echo "✅ Coverage collection: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Coverage collection: WARNING" >> $GITHUB_STEP_SUMMARY
        fi

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: neo-service-layer:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm neo-service-layer:test --version || true
        echo "Docker image built successfully"