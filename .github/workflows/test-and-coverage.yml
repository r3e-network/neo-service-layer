name: Test and Coverage

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run tests with coverage
      run: |
        dotnet test --configuration Release \
          --no-build \
          --settings test.runsettings \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --logger "trx;LogFileName=test-results.trx" \
          --logger "console;verbosity=normal"

    - name: Generate coverage report
      if: always()
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator \
          -reports:TestResults/**/coverage.cobertura.xml \
          -targetdir:TestResults/CoverageReport \
          -reporttypes:Html;Cobertura;MarkdownSummary

    - name: Upload coverage to Codecov
      if: always()
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./TestResults/**/coverage.cobertura.xml
        flags: unittests
        name: neo-service-layer
        fail_ci_if_error: false

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          TestResults/**/*.trx
          TestResults/**/*.xml
          TestResults/CoverageReport/**

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: 'TestResults/**/*.trx'
        reporter: dotnet-trx

    - name: Coverage Report Comment
      uses: 5monkeys/cobertura-action@master
      if: github.event_name == 'pull_request'
      with:
        path: TestResults/**/coverage.cobertura.xml
        minimum_coverage: 75
        fail_below_threshold: false
        show_line: true
        show_branch: true
        show_missing: true

    - name: Check coverage threshold
      run: |
        coverage=$(grep -oP 'line-rate="\K[^"]+' TestResults/**/coverage.cobertura.xml | head -1)
        coverage_percent=$(echo "$coverage * 100" | bc)
        echo "Coverage: ${coverage_percent}%"
        
        if (( $(echo "$coverage_percent < 80" | bc -l) )); then
          echo "⚠️ Coverage ${coverage_percent}% is below 80% threshold"
          # Don't fail the build, just warn
        else
          echo "✅ Coverage ${coverage_percent}% meets threshold"
        fi

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run performance tests
      run: |
        dotnet run --project tests/Performance/NeoServiceLayer.Performance.Tests \
          --configuration Release \
          -- --filter * --exporters json html

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: BenchmarkDotNet.Artifacts/**

  test-matrix:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run tests
      run: |
        dotnet test --configuration Release \
          --logger "console;verbosity=minimal"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run integration tests
      env:
        REDIS_CONNECTION: localhost:6379
      run: |
        dotnet test tests/Integration/**/*.csproj \
          --configuration Release \
          --filter "Category=Integration"