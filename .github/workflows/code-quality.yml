name: 🔍 Code Quality & Standards Enforcement

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '*.sln'
      - '**/*.csproj'
      - '.github/workflows/code-quality.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '*.sln'
      - '**/*.csproj'
  workflow_dispatch:
    inputs:
      run_full_analysis:
        description: 'Run full analysis including expensive checks'
        required: false
        default: false
        type: boolean

# Cancel previous workflow runs for the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  MIN_CODE_COVERAGE: 75
  MIN_BRANCH_COVERAGE: 70
  NEO_ALLOW_SGX_SIMULATION: true
  SGX_MODE: SIM
  SGX_SDK: /opt/intel/sgxsdk
  SGX_DEBUG: 1
  CI: true
  TEST_ENVIRONMENT: CI

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write
  statuses: write

jobs:
  # 🔍 Code Quality Analysis
  code-analysis:
    name: 🔍 Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    outputs:
      coverage-passed: ${{ steps.coverage.outputs.passed }}
      style-passed: ${{ steps.style.outputs.passed }}
      security-passed: ${{ steps.security.outputs.passed }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🔒 Install SGX SDK (Simulation Mode)
      run: |
        echo "::group::Installing Intel SGX SDK for CI simulation"
        wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | sudo apt-key add -
        echo "deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/intel-sgx.list
        sudo apt-get update
        sudo apt-get install -y libsgx-urts libsgx-enclave-common-dev libsgx-dcap-ql-dev sgx-aesm-service libsgx-aesm-launch-plugin
        
        # Create SGX SDK directory structure (needed for simulation)
        sudo mkdir -p /opt/intel/sgxsdk/lib64
        sudo mkdir -p /opt/intel/sgxsdk/bin/x64
        
        # Create symbolic links for commonly used SGX libraries
        sudo ln -sf /usr/lib/x86_64-linux-gnu/libsgx_urts.so /opt/intel/sgxsdk/lib64/libsgx_urts.so || true
        sudo ln -sf /usr/lib/x86_64-linux-gnu/libsgx_urts_sim.so /opt/intel/sgxsdk/lib64/libsgx_urts_sim.so || true
        
        echo "SGX SDK installed and configured for simulation mode"
        echo "::endgroup::"

    - name: 🚀 Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', 'global.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: 📦 Restore dependencies
      run: |
        echo "::group::Restoring dependencies"
        dotnet restore NeoServiceLayer.sln --verbosity minimal
        echo "::endgroup::"

    - name: 🏗️ Build solution
      run: |
        echo "::group::Building solution (Release)"
        dotnet build NeoServiceLayer.sln --configuration Release --no-restore --verbosity minimal
        echo "::endgroup::"

    - name: 📊 Run tests with coverage
      run: |
        echo "::group::Running tests with coverage collection"
        dotnet test NeoServiceLayer.sln \
          --configuration Release \
          --no-build \
          --verbosity minimal \
          --logger trx \
          --results-directory TestResults/ \
          --collect:"XPlat Code Coverage" \
          --settings tests/codecoverage.runsettings \
          --filter "Category!=Integration&Category!=Performance"
        echo "::endgroup::"

    - name: 📈 Generate coverage report
      run: |
        echo "::group::Installing ReportGenerator"
        dotnet tool install -g dotnet-reportgenerator-globaltool || true
        echo "::endgroup::"
        
        echo "::group::Generating coverage report"
        # Use the full path to reportgenerator
        $HOME/.dotnet/tools/reportgenerator \
          -reports:"TestResults/**/coverage.cobertura.xml" \
          -targetdir:"TestResults/CoverageReport" \
          -reporttypes:"HtmlInline_AzurePipelines;Cobertura;JsonSummary;MarkdownSummaryGithub" \
          -verbosity:"Warning" || echo "Warning: Coverage report generation failed"
        echo "::endgroup::"

    - name: 📊 Check coverage thresholds
      id: coverage
      run: |
        echo "::group::Coverage Analysis"
        if [ -f "TestResults/CoverageReport/Summary.json" ]; then
          COVERAGE=$(cat TestResults/CoverageReport/Summary.json | jq -r '.coverage.linecoverage // 0')
          BRANCH_COVERAGE=$(cat TestResults/CoverageReport/Summary.json | jq -r '.coverage.branchcoverage // 0')
          
          echo "Line coverage: ${COVERAGE}%"
          echo "Branch coverage: ${BRANCH_COVERAGE}%"
          echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
          echo "branch-coverage=${BRANCH_COVERAGE}" >> $GITHUB_OUTPUT
          
          if (( $(echo "${COVERAGE} >= ${MIN_CODE_COVERAGE}" | bc -l) )) && (( $(echo "${BRANCH_COVERAGE} >= ${MIN_BRANCH_COVERAGE}" | bc -l) )); then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "✅ Code coverage meets threshold: ${COVERAGE}% line, ${BRANCH_COVERAGE}% branch"
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "❌ Coverage below threshold: ${COVERAGE}% line (>=${MIN_CODE_COVERAGE}%), ${BRANCH_COVERAGE}% branch (>=${MIN_BRANCH_COVERAGE}%)"
          fi
        else
          echo "⚠️ No coverage report found"
          echo "passed=false" >> $GITHUB_OUTPUT
        fi
        echo "::endgroup::"

    - name: 🎨 Code style analysis
      id: style
      run: |
        echo "::group::Code Style Analysis"
        
        # Check formatting
        echo "Checking code formatting..."
        UNFORMATTED_FILES=$(dotnet format --verify-no-changes --verbosity minimal 2>&1 || true)
        
        if [ -z "$UNFORMATTED_FILES" ]; then
          echo "✅ Code formatting is correct"
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Code formatting issues found:"
          echo "$UNFORMATTED_FILES"
          echo "passed=false" >> $GITHUB_OUTPUT
        fi
        echo "::endgroup::"

    - name: 🛡️ Security analysis
      id: security
      run: |
        echo "::group::Security Analysis"
        
        # Check for vulnerable packages
        VULNERABILITIES=$(dotnet list package --vulnerable --include-transitive 2>&1 || true)
        
        if echo "$VULNERABILITIES" | grep -i "critical\|high"; then
          echo "❌ Security vulnerabilities found:"
          echo "$VULNERABILITIES"
          echo "passed=false" >> $GITHUB_OUTPUT
        else
          echo "✅ No critical security vulnerabilities found"
          echo "passed=true" >> $GITHUB_OUTPUT
        fi
        echo "::endgroup::"

    - name: 📤 Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ github.run_number }}
        path: TestResults/CoverageReport/
        retention-days: 30

    - name: 📈 Upload coverage to Codecov
      if: always()
      uses: codecov/codecov-action@v4
      with:
        files: TestResults/CoverageReport/Cobertura.xml
        flags: unittests
        name: neo-service-layer-quality
        fail_ci_if_error: false
        verbose: false
        token: ${{ secrets.CODECOV_TOKEN }}

  # 📝 Quality Gate Report
  quality-gate:
    name: 📝 Quality Gate Report
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [code-analysis]
    if: always()
    
    steps:
    - name: 📊 Generate quality report
      run: |
        echo "## 🔍 Code Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        
        # Coverage
        COVERAGE_STATUS="${{ needs.code-analysis.outputs.coverage-passed == 'true' && '✅ Passed' || '❌ Failed' }}"
        echo "| Code Coverage | $COVERAGE_STATUS | Min: ${MIN_CODE_COVERAGE}% line, ${MIN_BRANCH_COVERAGE}% branch |" >> $GITHUB_STEP_SUMMARY
        
        # Style
        STYLE_STATUS="${{ needs.code-analysis.outputs.style-passed == 'true' && '✅ Passed' || '❌ Failed' }}"
        echo "| Code Style | $STYLE_STATUS | Formatting and style rules |" >> $GITHUB_STEP_SUMMARY
        
        # Security
        SECURITY_STATUS="${{ needs.code-analysis.outputs.security-passed == 'true' && '✅ Passed' || '❌ Failed' }}"
        echo "| Security | $SECURITY_STATUS | Vulnerability scanning |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

    - name: 💬 Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coveragePassed = '${{ needs.code-analysis.outputs.coverage-passed }}' === 'true';
          const stylePassed = '${{ needs.code-analysis.outputs.style-passed }}' === 'true';
          const securityPassed = '${{ needs.code-analysis.outputs.security-passed }}' === 'true';
          
          const allPassed = coveragePassed && stylePassed && securityPassed;
          
          const statusIcon = allPassed ? '✅' : '❌';
          const statusText = allPassed ? 'All quality checks passed!' : 'Some quality checks failed';
          
          const body = `## ${statusIcon} Code Quality Report
          
          | Check | Status |
          |-------|--------|
          | Code Coverage | ${coveragePassed ? '✅' : '❌'} |
          | Code Style | ${stylePassed ? '✅' : '❌'} |
          | Security | ${securityPassed ? '✅' : '❌'} |
          
          **Overall Status:** ${statusText}
          
          ${allPassed ? '' : '⚠️ Please fix the failing checks before merging.'}
          
          <details>
          <summary>📊 Coverage Details</summary>
          
          - **Minimum Line Coverage:** ${process.env.MIN_CODE_COVERAGE}%
          - **Minimum Branch Coverage:** ${process.env.MIN_BRANCH_COVERAGE}%
          
          </details>
          
          ---
          *Automated by Code Quality workflow*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: ❌ Fail if quality gates not met
      if: |
        needs.code-analysis.outputs.coverage-passed != 'true' || 
        needs.code-analysis.outputs.style-passed != 'true' || 
        needs.code-analysis.outputs.security-passed != 'true'
      run: |
        echo "❌ Quality gates failed!"
        echo "Coverage: ${{ needs.code-analysis.outputs.coverage-passed }}"
        echo "Style: ${{ needs.code-analysis.outputs.style-passed }}"
        echo "Security: ${{ needs.code-analysis.outputs.security-passed }}"
        exit 1