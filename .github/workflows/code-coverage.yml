name: Code Coverage Analysis

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0'
  SOLUTION_FILE: 'NeoServiceLayer.sln'

jobs:
  coverage:
    runs-on: ubuntu-latest
    name: Code Coverage Analysis

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release

    - name: Install coverage tools
      run: |
        dotnet tool install --global dotnet-coverage
        dotnet tool install --global dotnet-reportgenerator-globaltool
        dotnet tool install --global coverlet.console

    - name: Run tests with coverage
      run: |
        dotnet test ${{ env.SOLUTION_FILE }} \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory "./coverage" \
          --settings coverlet.runsettings

    - name: Generate coverage report
      run: |
        reportgenerator \
          -reports:"./coverage/**/coverage.cobertura.xml" \
          -targetdir:"./coverage-report" \
          -reporttypes:"Html;Badges;TextSummary;Cobertura;JsonSummary" \
          -assemblyfilters:"-*.Tests*;-*.TestUtilities*" \
          -classfilters:"-*.Migrations.*;-*.Program;-*.Startup"

    - name: Display coverage summary
      run: |
        echo "## Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        cat ./coverage-report/Summary.txt >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage-report/Cobertura.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ./coverage-report/lcov.info
        format: lcov

    - name: Archive coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          ./coverage-report/
          ./coverage/**/coverage.cobertura.xml
        retention-days: 30

    - name: Coverage quality gate
      run: |
        COVERAGE=$(grep -oP 'Line coverage: \K[\d.]+' ./coverage-report/Summary.txt | head -1)
        echo "Current coverage: ${COVERAGE}%"
        
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "‚ùå Coverage ${COVERAGE}% is below 80% threshold"
          echo "coverage_status=failed" >> $GITHUB_ENV
        else
          echo "‚úÖ Coverage ${COVERAGE}% meets 80% threshold"
          echo "coverage_status=passed" >> $GITHUB_ENV
        fi

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './coverage-report/Summary.txt';
          
          if (fs.existsSync(path)) {
            const summary = fs.readFileSync(path, 'utf8');
            const coverage = summary.match(/Line coverage: ([\d.]+)%/)?.[1] || 'Unknown';
            
            const body = `## üìä Code Coverage Report
            
            **Line Coverage: ${coverage}%**
            
            ${coverage >= 80 ? '‚úÖ' : '‚ùå'} Coverage threshold: 80%
            
            <details>
            <summary>üìã Detailed Coverage Summary</summary>
            
            \`\`\`
            ${summary}
            \`\`\`
            </details>
            
            üìÅ [Full Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }

  security-analysis:
    runs-on: ubuntu-latest
    name: Security and Quality Analysis
    needs: coverage

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install security tools
      run: |
        dotnet tool install --global security-scan
        dotnet tool install --global dotnet-sonarscanner

    - name: Run security scan
      run: |
        security-scan --project-type dotnet --source ./src --output ./security-report.json
      continue-on-error: true

    - name: Install SonarCloud scanner
      run: |
        dotnet tool install --global dotnet-sonarscanner

    - name: SonarCloud analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ ! -z "${{ secrets.SONAR_TOKEN }}" ]; then
          dotnet sonarscanner begin \
            /k:"neo-service-layer" \
            /o:"neo-service-layer-org" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="./coverage/**/coverage.opencover.xml"
          
          dotnet build ${{ env.SOLUTION_FILE }} --configuration Release
          
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        else
          echo "SonarCloud token not configured, skipping analysis"
        fi
      continue-on-error: true

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: ./security-report.json
        retention-days: 30