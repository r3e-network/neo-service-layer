name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Run .NET vulnerability scan
        run: |
          dotnet restore
          dotnet list package --vulnerable --include-transitive
      
      - name: Run Snyk scan
        uses: snyk/actions/dotnet@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=upgradable

  code-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          queries: security-extended,security-and-quality
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Build
        run: dotnet build
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/csharp
            p/docker
            p/kubernetes
            p/owasp-top-ten

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: 
          - Dockerfile
          - docker/microservices/api-gateway/Dockerfile
          - docker/microservices/key-management/Dockerfile
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy on Dockerfile
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: ${{ matrix.dockerfile }}
          format: 'sarif'
          output: 'trivy-results-${{ strategy.job-index }}.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ strategy.job-index }}.sarif'
      
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.dockerfile }}
          failure-threshold: warning

  infrastructure-scan:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: all
          output_format: sarif
          output_file_path: checkov.sarif
          skip_check: CKV_DOCKER_2,CKV_DOCKER_3
      
      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif

  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run FOSSA scan
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
      
      - name: Run license checker
        run: |
          npm install -g license-checker
          license-checker --summary --excludePrivatePackages > license-summary.txt
          
      - name: Upload license summary
        uses: actions/upload-artifact@v3
        with:
          name: license-summary
          path: license-summary.txt

  smart-contract-scan:
    name: Smart Contract Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Install Neo tools
        run: |
          dotnet tool install --global neo.compiler.csharp
          dotnet tool install --global neo.express
      
      - name: Build contracts
        working-directory: contracts-neo-n3
        run: dotnet build
      
      - name: Basic contract analysis
        run: |
          # Check for common vulnerabilities
          find contracts-neo-n3 -name "*.cs" | xargs grep -l "Transfer\|Storage\|Runtime" > contract-analysis.txt
          
      - name: Upload analysis
        uses: actions/upload-artifact@v3
        with:
          name: contract-analysis
          path: contract-analysis.txt

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, container-scan, infrastructure-scan, smart-contract-scan]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate consolidated report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "**Date**: $(date)" >> security-report.md
          echo "**Branch**: ${{ github.ref }}" >> security-report.md
          echo "**Commit**: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Scan Results" >> security-report.md
          echo "" >> security-report.md
          
          # Add scan summaries
          for scan in dependency code secret container infrastructure smart-contract; do
            echo "### $scan Scan" >> security-report.md
            if [ -f "$scan-analysis/$scan-summary.txt" ]; then
              cat "$scan-analysis/$scan-summary.txt" >> security-report.md
            else
              echo "âœ“ Completed" >> security-report.md
            fi
            echo "" >> security-report.md
          done
      
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });