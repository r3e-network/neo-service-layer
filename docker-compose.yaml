version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: nsl-postgres
    environment:
      POSTGRES_DB: neoservicelayer
      POSTGRES_USER: nsluser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-SecurePassword123!}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./src/Infrastructure/NeoServiceLayer.Infrastructure.Persistence/Migrations:/docker-entrypoint-initdb.d
    networks:
      - nsl-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nsluser -d neoservicelayer"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nsl-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-RedisPassword123!}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - nsl-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: nsl-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-nsluser}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-RabbitPassword123!}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - nsl-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Consul Service Discovery
  consul:
    image: consul:latest
    container_name: nsl-consul
    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    volumes:
      - consul-data:/consul/data
    networks:
      - nsl-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: nsl-jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    networks:
      - nsl-network

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: nsl-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - nsl-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: nsl-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-GrafanaPassword123!}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - nsl-network
    depends_on:
      - prometheus

networks:
  nsl-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data:
  consul-data:
  prometheus-data:
  grafana-data: