version: '3.8'

x-common-variables: &common-variables
  ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
  Consul__Address: http://consul:8500
  Consul__Datacenter: dc1
  ConnectionStrings__DefaultConnection: Host=postgres;Database=neo_service_layer;Username=${DB_USER:-neo_service_user};Password=${DB_PASSWORD:-neopass123};Pooling=true;MinPoolSize=5;MaxPoolSize=100
  Redis__Configuration: redis:6379,password=${REDIS_PASSWORD:-redispass123},ssl=false,abortConnect=false
  RabbitMQ__HostName: rabbitmq
  RabbitMQ__UserName: ${RABBITMQ_USER:-neo_service_user}
  RabbitMQ__Password: ${RABBITMQ_PASSWORD:-rabbitpass123}
  Jwt__SecretKey: ${JWT_SECRET_KEY:-ChangeThisToASecureRandomKey123!}
  Jwt__Issuer: ${JWT_ISSUER:-neo-service-layer}
  Jwt__Audience: ${JWT_AUDIENCE:-neo-service-layer-clients}
  OpenTelemetry__Exporters__Jaeger__Enabled: true
  OpenTelemetry__Exporters__Jaeger__Endpoint: http://jaeger:14268/api/traces

x-service-defaults: &service-defaults
  restart: unless-stopped
  networks:
    - neo-network
  environment:
    <<: *common-variables
  depends_on:
    - consul
    - postgres
    - redis
    - rabbitmq
  deploy:
    resources:
      limits:
        memory: 512M
      reservations:
        memory: 256M
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost/health"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 40s

services:
  # Infrastructure Services
  consul:
    image: hashicorp/consul:1.17
    container_name: neo-consul
    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    networks:
      - neo-network
    volumes:
      - consul_data:/consul/data
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: neo-postgres
    environment:
      - POSTGRES_DB=${DB_NAME:-neo_service_layer}
      - POSTGRES_USER=${DB_USER:-neo_service_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-neopass123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - neo-network
    ports:
      - "5432:5432"
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: neo-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispass123} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - neo-network
    ports:
      - "6379:6379"
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: neo-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-neo_service_user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-rabbitpass123}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - neo-network
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: neo-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    networks:
      - neo-network
    ports:
      - "9090:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.2.3
    container_name: neo-grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - neo-network
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: neo-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/badger
    networks:
      - neo-network
    ports:
      - "16686:16686"
      - "14268:14268"
      - "4317:4317"
      - "4318:4318"
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: src/Gateway/NeoServiceLayer.ApiGateway/Dockerfile
    container_name: neo-api-gateway
    <<: *service-defaults
    ports:
      - "7000:8080"
    environment:
      <<: *common-variables
      SERVICE_NAME: ApiGateway

  # Core Services
  abstract-account-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.AbstractAccount/Dockerfile
    container_name: neo-abstract-account-service
    <<: *service-defaults
    ports:
      - "8001:8001"
    environment:
      <<: *common-variables
      SERVICE_NAME: AbstractAccountService
      Port: 8001

  automation-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.Automation/Dockerfile
    container_name: neo-automation-service
    <<: *service-defaults
    ports:
      - "8002:8002"
    environment:
      <<: *common-variables
      SERVICE_NAME: AutomationService
      Port: 8002

  backup-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.Backup/Dockerfile
    container_name: neo-backup-service
    <<: *service-defaults
    ports:
      - "8003:8003"
    environment:
      <<: *common-variables
      SERVICE_NAME: BackupService
      Port: 8003

  compliance-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.Compliance/Dockerfile
    container_name: neo-compliance-service
    <<: *service-defaults
    ports:
      - "8004:8004"
    environment:
      <<: *common-variables
      SERVICE_NAME: ComplianceService
      Port: 8004

  compute-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.Compute/Dockerfile
    container_name: neo-compute-service
    <<: *service-defaults
    ports:
      - "8005:8005"
    environment:
      <<: *common-variables
      SERVICE_NAME: ComputeService
      Port: 8005

  configuration-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.Configuration/Dockerfile
    container_name: neo-configuration-service
    <<: *service-defaults
    ports:
      - "8006:8006"
    environment:
      <<: *common-variables
      SERVICE_NAME: ConfigurationService
      Port: 8006

  crosschain-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.CrossChain/Dockerfile
    container_name: neo-crosschain-service
    <<: *service-defaults
    ports:
      - "8007:8007"
    environment:
      <<: *common-variables
      SERVICE_NAME: CrossChainService
      Port: 8007

  enclave-storage-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.EnclaveStorage/Dockerfile
    container_name: neo-enclave-storage-service
    <<: *service-defaults
    ports:
      - "8008:8008"
    environment:
      <<: *common-variables
      SERVICE_NAME: EnclaveStorageService
      Port: 8008

  event-subscription-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.EventSubscription/Dockerfile
    container_name: neo-event-subscription-service
    <<: *service-defaults
    ports:
      - "8009:8009"
    environment:
      <<: *common-variables
      SERVICE_NAME: EventSubscriptionService
      Port: 8009

  health-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.Health/Dockerfile
    container_name: neo-health-service
    <<: *service-defaults
    ports:
      - "8010:8010"
    environment:
      <<: *common-variables
      SERVICE_NAME: HealthService
      Port: 8010

  key-management-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.KeyManagement/Dockerfile
    container_name: neo-key-management-service
    <<: *service-defaults
    ports:
      - "8011:8011"
    environment:
      <<: *common-variables
      SERVICE_NAME: KeyManagementService
      Port: 8011

  monitoring-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.Monitoring/Dockerfile
    container_name: neo-monitoring-service
    <<: *service-defaults
    ports:
      - "8012:8012"
    environment:
      <<: *common-variables
      SERVICE_NAME: MonitoringService
      Port: 8012

  network-security-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.NetworkSecurity/Dockerfile
    container_name: neo-network-security-service
    <<: *service-defaults
    ports:
      - "8013:8013"
    environment:
      <<: *common-variables
      SERVICE_NAME: NetworkSecurityService
      Port: 8013

  notification-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.Notification/Dockerfile
    container_name: neo-notification-service
    <<: *service-defaults
    ports:
      - "8014:8014"
    environment:
      <<: *common-variables
      SERVICE_NAME: NotificationService
      Port: 8014

  oracle-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.Oracle/Dockerfile
    container_name: neo-oracle-service
    <<: *service-defaults
    ports:
      - "8015:8015"
    environment:
      <<: *common-variables
      SERVICE_NAME: OracleService
      Port: 8015

  proof-of-reserve-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.ProofOfReserve/Dockerfile
    container_name: neo-proof-of-reserve-service
    <<: *service-defaults
    ports:
      - "8016:8016"
    environment:
      <<: *common-variables
      SERVICE_NAME: ProofOfReserveService
      Port: 8016

  randomness-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.Randomness/Dockerfile
    container_name: neo-randomness-service
    <<: *service-defaults
    ports:
      - "8017:8017"
    environment:
      <<: *common-variables
      SERVICE_NAME: RandomnessService
      Port: 8017

  secrets-management-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.SecretsManagement/Dockerfile
    container_name: neo-secrets-management-service
    <<: *service-defaults
    ports:
      - "8018:8018"
    environment:
      <<: *common-variables
      SERVICE_NAME: SecretsManagementService
      Port: 8018

  smart-contracts-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.SmartContracts/Dockerfile
    container_name: neo-smart-contracts-service
    <<: *service-defaults
    ports:
      - "8019:8019"
    environment:
      <<: *common-variables
      SERVICE_NAME: SmartContractsService
      Port: 8019

  social-recovery-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.SocialRecovery/Dockerfile
    container_name: neo-social-recovery-service
    <<: *service-defaults
    ports:
      - "8020:8020"
    environment:
      <<: *common-variables
      SERVICE_NAME: SocialRecoveryService
      Port: 8020

  storage-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.Storage/Dockerfile
    container_name: neo-storage-service
    <<: *service-defaults
    ports:
      - "8021:8021"
    environment:
      <<: *common-variables
      SERVICE_NAME: StorageService
      Port: 8021

  voting-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.Voting/Dockerfile
    container_name: neo-voting-service
    <<: *service-defaults
    ports:
      - "8022:8022"
    environment:
      <<: *common-variables
      SERVICE_NAME: VotingService
      Port: 8022

  zero-knowledge-service:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.ZeroKnowledge/Dockerfile
    container_name: neo-zero-knowledge-service
    <<: *service-defaults
    ports:
      - "8023:8023"
    environment:
      <<: *common-variables
      SERVICE_NAME: ZeroKnowledgeService
      Port: 8023

  # AI Services
  pattern-recognition-service:
    build:
      context: .
      dockerfile: src/AI/NeoServiceLayer.AI.PatternRecognition/Dockerfile
    container_name: neo-pattern-recognition-service
    <<: *service-defaults
    ports:
      - "8024:8024"
    environment:
      <<: *common-variables
      SERVICE_NAME: PatternRecognitionService
      Port: 8024

  prediction-service:
    build:
      context: .
      dockerfile: src/AI/NeoServiceLayer.AI.Prediction/Dockerfile
    container_name: neo-prediction-service
    <<: *service-defaults
    ports:
      - "8025:8025"
    environment:
      <<: *common-variables
      SERVICE_NAME: PredictionService
      Port: 8025

  # Advanced Services
  fair-ordering-service:
    build:
      context: .
      dockerfile: src/Advanced/NeoServiceLayer.Advanced.FairOrdering/Dockerfile
    container_name: neo-fair-ordering-service
    <<: *service-defaults
    ports:
      - "8026:8026"
    environment:
      <<: *common-variables
      SERVICE_NAME: FairOrderingService
      Port: 8026

  # RPC Server
  rpc-server:
    build:
      context: .
      dockerfile: src/RPC/NeoServiceLayer.RPC.Server/Dockerfile
    container_name: neo-rpc-server
    <<: *service-defaults
    ports:
      - "8027:8080"
    environment:
      <<: *common-variables
      SERVICE_NAME: RpcServer
      Port: 8080

networks:
  neo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  consul_data:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  jaeger_data: