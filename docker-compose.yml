version: '3.8'

services:
  # PostgreSQL Database
  neo-postgres:
    image: postgres:16-alpine
    container_name: neo-postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-neoservice}
      - POSTGRES_USER=${POSTGRES_USER:-neoservice_app}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD environment variable is required}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - neo-postgres-data:/var/lib/postgresql/data
      - ./src/Infrastructure/NeoServiceLayer.Infrastructure.Persistence/Migrations:/docker-entrypoint-initdb.d
      - ./scripts/postgresql-init.sh:/docker-entrypoint-initdb.d/00-init.sh:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - neo-network
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c wal_buffers=16MB
      -c checkpoint_completion_target=0.9
      -c wal_compression=on
      -c log_statement=all
      -c log_duration=on
      -c log_min_duration_statement=1000

  # Redis Cache
  neo-redis:
    image: redis:7-alpine
    container_name: neo-redis
    ports:
      - "6379:6379"
    volumes:
      - neo-redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - neo-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  neo-service-layer:
    image: jinghuiliao/neo-service-layer:latest
    container_name: neo-service-layer
    ports:
      - "0.0.0.0:8080:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      # JWT_SECRET_KEY must be set via environment variable for security
      # Example: export JWT_SECRET_KEY=$(openssl rand -base64 32)
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:?JWT_SECRET_KEY environment variable is required}
      - NEO_ALLOW_SGX_SIMULATION=true
      - DOTNET_ENVIRONMENT=Development
      - SSL_CERT_PATH=
      # Configure CORS for your specific domain in production
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
      - ASPNETCORE_CORS__ALLOWANYORIGIN=true
      - ASPNETCORE_CORS__ALLOWANYMETHOD=true
      - ASPNETCORE_CORS__ALLOWANYHEADER=true
      # PostgreSQL Configuration
      - ConnectionStrings__DefaultConnection=Host=neo-postgres;Port=5432;Database=neo_service_layer;Username=neo_user;Password=${POSTGRES_PASSWORD};Include Error Detail=true;
      - ConnectionStrings__PostgreSQL=Host=neo-postgres;Port=5432;Database=neo_service_layer;Username=neo_user;Password=${POSTGRES_PASSWORD};Include Error Detail=true;
      # Redis Configuration
      - ConnectionStrings__Redis=neo-redis:6379
      # Database Configuration
      - Database__Provider=PostgreSQL
      - Database__ConnectionString=Host=neo-postgres;Port=5432;Database=neo_service_layer;Username=neo_user;Password=${POSTGRES_PASSWORD};Include Error Detail=true;
    volumes:
      - neo-data:/app/data
      - neo-logs:/var/log/neo-service-layer
      - neo-config:/app/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "${SERVICE_HTTP_5000:-http://${SERVICE_HOST_5000:-localhost:5000}}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - neo-network
    depends_on:
      neo-postgres:
        condition: service_healthy
      neo-redis:
        condition: service_healthy

  # Optional: Add a reverse proxy for production deployments
  nginx:
    image: nginx:alpine
    container_name: neo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - neo-service-layer
    restart: unless-stopped
    networks:
      - neo-network
    profiles:
      - production

volumes:
  neo-data:
    driver: local
  neo-logs:
    driver: local
  neo-config:
    driver: local
  neo-postgres-data:
    driver: local
  neo-redis-data:
    driver: local

networks:
  neo-network:
    driver: bridge