version: '3.8'

x-common-variables: &common-variables
  ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
  Consul__Address: http://consul:8500
  ConnectionStrings__DefaultConnection: Host=${DB_HOST};Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD}
  Redis__Configuration: ${REDIS_HOST}:${REDIS_PORT},password=${REDIS_PASSWORD}
  Jwt__SecretKey: ${JWT_SECRET_KEY}

x-service-defaults: &service-defaults
  restart: unless-stopped
  networks:
    - neo-network
  environment:
    <<: *common-variables
  depends_on:
    - consul
    - postgres
    - redis
  deploy:
    resources:
      limits:
        memory: 1G
      reservations:
        memory: 512M

services:
  # Infrastructure Services
  consul:
    image: hashicorp/consul:1.17
    container_name: neo-consul-phase1
    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0
    ports:
      - "8500:8500"
    networks:
      - neo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:16-alpine
    container_name: neo-postgres-phase1
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - neo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: neo-redis-phase1
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - neo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: neo-prometheus-phase1
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - neo-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.2.3
    container_name: neo-grafana-phase1
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    networks:
      - neo-network
    restart: unless-stopped

  # Phase 1 Core Services
  api-gateway:
    build:
      context: .
      dockerfile: src/Api/NeoServiceLayer.Api/Dockerfile
    container_name: neo-api-gateway-phase1
    <<: *service-defaults
    ports:
      - "80:80"
      - "443:443"
    environment:
      <<: *common-variables
      SERVICE_NAME: ApiGateway
    volumes:
      - ./certificates:/https:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  smart-contracts:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.SmartContracts/Dockerfile
    container_name: neo-smart-contracts-phase1
    <<: *service-defaults
    environment:
      <<: *common-variables
      SERVICE_NAME: SmartContracts

  configuration:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.Configuration/Dockerfile
    container_name: neo-configuration-phase1
    <<: *service-defaults
    environment:
      <<: *common-variables
      SERVICE_NAME: Configuration

  automation:
    build:
      context: .
      dockerfile: src/Services/NeoServiceLayer.Services.Automation/Dockerfile
    container_name: neo-automation-phase1
    <<: *service-defaults
    environment:
      <<: *common-variables
      SERVICE_NAME: Automation

networks:
  neo-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
