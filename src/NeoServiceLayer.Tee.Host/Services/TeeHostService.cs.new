using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Console;
using NeoServiceLayer.Core.Interfaces;
using NeoServiceLayer.Core.Models;
using NeoServiceLayer.Shared.Models;
using NeoServiceLayer.Tee.Shared.Interfaces;

namespace NeoServiceLayer.Tee.Host.Services
{
    /// <summary>
    /// Request model for JavaScript function execution.
    /// </summary>
    public class JavaScriptExecutionRequest
    {
        /// <summary>
        /// Gets or sets the function ID.
        /// </summary>
        public string FunctionId { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the function code.
        /// </summary>
        public string FunctionCode { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the input data.
        /// </summary>
        public string Input { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the user ID.
        /// </summary>
        public string UserId { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the GAS limit.
        /// </summary>
        public long GasLimit { get; set; }
    }

    /// <summary>
    /// Implementation of the TEE host service.
    /// </summary>
    public class TeeHostService : ITeeHostService, IDisposable
    {
        private readonly IConfiguration _configuration;
        private readonly ILogger<TeeHostService> _logger;
        private readonly ITeeInterface _teeInterface;
        private bool _isInitialized;
        private bool _isSimulationMode;
        private bool _disposed;

        /// <summary>
        /// Initializes a new instance of the TeeHostService class.
        /// </summary>
        /// <param name="configuration">The configuration.</param>
        /// <param name="logger">The logger.</param>
        public TeeHostService(IConfiguration configuration, ILogger<TeeHostService> logger)
            : this(configuration, logger, null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the TeeHostService class with a custom TEE interface factory.
        /// </summary>
        /// <param name="configuration">The configuration.</param>
        /// <param name="logger">The logger.</param>
        /// <param name="teeInterfaceFactory">The TEE interface factory to use.</param>
        public TeeHostService(IConfiguration configuration, ILogger<TeeHostService> logger, ITeeInterfaceFactory teeInterfaceFactory)
        {
            _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));

            // Check if simulation mode is enabled
            _isSimulationMode = _configuration.GetValue<bool>("Tee:SimulationMode", false);

            // Create TEE interface using factory
            if (teeInterfaceFactory != null)
            {
                var enclavePath = _configuration["Tee:Enclave:Path"] ?? "liboe_enclave.signed.so";
                _teeInterface = teeInterfaceFactory.CreateTeeInterface(enclavePath, _isSimulationMode);
            }
            else
            {
                // Create TEE interface directly
                var loggerFactory = LoggerFactory.Create(builder => builder.AddConsole());

                // Use Open Enclave interface in all modes
                var teeLogger = loggerFactory.CreateLogger<OpenEnclaveInterface>();
                var enclavePath = _configuration["Tee:Enclave:Path"] ?? "liboe_enclave.signed.so";
                _teeInterface = new OpenEnclaveInterface(teeLogger, enclavePath);
            }

            // Initialize TEE asynchronously
            _ = InitializeTeeAsync();
        }

        /// <inheritdoc/>
        public async Task<bool> InitializeTeeAsync()
        {
            try
            {
                _logger.LogInformation("Initializing TEE (Simulation Mode: {IsSimulationMode})", _isSimulationMode);

                // Initialize the TEE interface
                _teeInterface.Initialize();
                _isInitialized = true;

                // Get enclave measurements
                var mrEnclave = _teeInterface.GetMrEnclave();
                var mrSigner = _teeInterface.GetMrSigner();
                _logger.LogInformation("TEE initialized successfully (MRENCLAVE: {MrEnclave}, MRSIGNER: {MrSigner})",
                    Convert.ToBase64String(mrEnclave), Convert.ToBase64String(mrSigner));

                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error initializing TEE");
                _isInitialized = false;
                return false;
            }
        }

        /// <inheritdoc/>
        public async Task<Dictionary<string, object>> ExecuteTaskAsync(Core.Models.Task task)
        {
            _logger.LogInformation("Executing task {TaskId} of type {TaskType} in TEE", task.Id, task.Type);

            if (!_isInitialized)
            {
                _logger.LogWarning("TEE is not initialized");
                throw new InvalidOperationException("TEE is not initialized");
            }

            if (task == null)
            {
                throw new ArgumentNullException(nameof(task));
            }

            try
            {
                // Create a message to send to the TEE
                var message = TeeMessage.Create(TeeMessageType.TaskExecution, JsonSerializer.Serialize(new
                {
                    Action = "execute_task",
                    Task = task
                }));

                // Send the message to the TEE
                var response = await SendMessageAsync(message);

                // Parse the response
                var result = JsonSerializer.Deserialize<Dictionary<string, object>>(response.Data);

                _logger.LogInformation("Task {TaskId} executed successfully in TEE", task.Id);

                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error executing task {TaskId} in TEE", task.Id);
                throw;
            }
        }

        /// <inheritdoc/>
        public async Task<TeeMessage> SendMessageAsync(TeeMessage message)
        {
            _logger.LogInformation("Sending message of type {MessageType} to TEE", message.Type);

            if (!_isInitialized)
            {
                _logger.LogWarning("TEE is not initialized");
                throw new InvalidOperationException("TEE is not initialized");
            }

            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            try
            {
                // Process the message in the TEE
                TeeMessage response;

                switch (message.Type)
                {
                    case TeeMessageType.JavaScriptExecution:
                        var jsRequest = JsonSerializer.Deserialize<JavaScriptExecutionRequest>(message.Data);
                        var jsResult = await _teeInterface.ExecuteJavaScriptAsync(
                            jsRequest.FunctionCode,
                            jsRequest.Input,
                            "{}",  // No secrets for now
                            jsRequest.FunctionId,
                            jsRequest.UserId);
                        response = TeeMessage.Create(TeeMessageType.JavaScriptExecution, jsResult);
                        break;

                    case TeeMessageType.Attestation:
                        var attestationReport = _teeInterface.GetAttestationReport(new byte[0]);
                        var attestationData = new
                        {
                            Report = Convert.ToBase64String(attestationReport),
                            MrEnclave = Convert.ToBase64String(_teeInterface.GetMrEnclave()),
                            MrSigner = Convert.ToBase64String(_teeInterface.GetMrSigner())
                        };
                        response = TeeMessage.Create(TeeMessageType.Attestation, JsonSerializer.Serialize(attestationData));
                        break;

                    default:
                        throw new NotSupportedException($"Message type {message.Type} is not supported");
                }

                _logger.LogInformation("Message of type {MessageType} processed successfully by TEE", message.Type);

                return response;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error sending message to TEE");
                throw;
            }
        }

        /// <inheritdoc/>
        public async Task<AttestationProof> GetAttestationProofAsync()
        {
            _logger.LogInformation("Getting attestation proof from TEE");

            if (!_isInitialized)
            {
                _logger.LogWarning("TEE is not initialized");
                throw new InvalidOperationException("TEE is not initialized");
            }

            try
            {
                // Create a message to send to the TEE
                var message = TeeMessage.Create(TeeMessageType.Attestation, "get_attestation");

                // Send the message to the TEE
                var response = await SendMessageAsync(message);

                // Parse the response
                var attestationProof = JsonSerializer.Deserialize<AttestationProof>(response.Data);

                _logger.LogInformation("Attestation proof retrieved successfully from TEE");

                return attestationProof;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting attestation proof from TEE");
                throw;
            }
        }

        /// <inheritdoc/>
        public async Task<bool> VerifyAttestationProofAsync(AttestationProof attestationProof)
        {
            _logger.LogInformation("Verifying attestation proof");

            if (!_isInitialized)
            {
                _logger.LogWarning("TEE is not initialized");
                throw new InvalidOperationException("TEE is not initialized");
            }

            if (attestationProof == null)
            {
                throw new ArgumentNullException(nameof(attestationProof));
            }

            try
            {
                // Create a message to send to the TEE
                var message = TeeMessage.Create(TeeMessageType.Attestation, JsonSerializer.Serialize(attestationProof));

                // Send the message to the TEE
                var response = await SendMessageAsync(message);

                // Parse the response
                var result = JsonSerializer.Deserialize<bool>(response.Data);

                _logger.LogInformation("Attestation proof verification completed with result: {IsValid}", result);

                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error verifying attestation proof");
                throw;
            }
        }

        /// <inheritdoc/>
        public async Task<Core.Models.TeeStatus> GetStatusAsync()
        {
            _logger.LogInformation("Getting TEE status asynchronously");

            try
            {
                if (!_isInitialized)
                {
                    _logger.LogInformation("TEE is not initialized");
                    return Core.Models.TeeStatus.NotInitialized;
                }

                _logger.LogInformation("TEE status retrieved successfully");
                return Core.Models.TeeStatus.Running;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting TEE status");
                return Core.Models.TeeStatus.Error;
            }
        }

        /// <summary>
        /// Disposes the TeeHostService instance.
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Disposes the TeeHostService instance.
        /// </summary>
        /// <param name="disposing">Whether to dispose managed resources.</param>
        protected virtual void Dispose(bool disposing)
        {
            if (_disposed)
            {
                return;
            }

            if (disposing)
            {
                // Dispose managed resources
                _teeInterface.Dispose();
            }

            _disposed = true;
        }

        /// <summary>
        /// Finalizes the TeeHostService instance.
        /// </summary>
        ~TeeHostService()
        {
            Dispose(false);
        }
    }
}
