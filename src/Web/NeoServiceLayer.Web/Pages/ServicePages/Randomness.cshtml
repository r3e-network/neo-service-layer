@page "/servicepages/randomness"
@model NeoServiceLayer.Web.Pages.ServicePages.RandomnessModel
@{
    ViewData["Title"] = "Randomness Service";
    Model.OnGet();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Neo Service Layer</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        .header-gradient {
            background: linear-gradient(135deg, #9c27b0 0%, #673ab7 100%);
            color: white;
        }
        .service-card {
            transition: all 0.3s ease;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        }
        .service-card:hover {
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .feature-icon {
            font-size: 3rem;
            color: #9c27b0;
        }
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }
        .status-online {
            background-color: #28a745;
        }
        .status-offline {
            background-color: #dc3545;
        }
        .status-checking {
            background-color: #ffc107;
        }
        .random-output {
            font-family: 'Courier New', monospace;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 15px;
            min-height: 100px;
            word-break: break-all;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header-gradient py-4 mb-4">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1 class="display-5 mb-0">
                        <i class="@Model.ServiceIcon me-3"></i>@Model.ServiceDisplayName
                    </h1>
                    <p class="lead mb-0">@Model.ServiceSubtitle</p>
                </div>
                <div class="col-md-4 text-end">
                    <div class="d-flex align-items-center justify-content-end">
                        <span id="service-status" class="badge bg-warning me-3">
                            <span class="status-indicator status-checking"></span>Checking...
                        </span>
                        <a href="/services" class="btn btn-light btn-sm me-2">
                            <i class="fas fa-arrow-left me-1"></i>Services
                        </a>
                        <a href="/" class="btn btn-light btn-sm">
                            <i class="fas fa-home me-1"></i>Home
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <!-- Service Information -->
            <div class="col-md-4 mb-4">
                <div class="card service-card h-100">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-info-circle me-2"></i>Service Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="text-center mb-3">
                            <i class="@Model.ServiceIcon feature-icon"></i>
                        </div>
                        <h6 class="card-title">@Model.ServiceDisplayName</h6>
                        <p class="card-text small">@Model.ServiceDescription</p>
                        
                        <hr>
                        
                        <h6>Service Details</h6>
                        <ul class="list-unstyled small">
                            <li><strong>Type:</strong> @Model.ServiceType</li>
                            <li><strong>Layer:</strong> @Model.ServiceLayer</li>
                            <li><strong>Security:</strong> SGX Enclave</li>
                            <li><strong>API Version:</strong> v1.0</li>
                        </ul>

                        <h6>Key Features</h6>
                        <ul class="list-unstyled small">
                            @foreach (var feature in Model.ServiceFeatures)
                            {
                                <li><i class="fas fa-check text-success me-2"></i>@feature</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Interactive Controls -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <ul class="nav nav-tabs card-header-tabs" id="service-tabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="status-tab" data-bs-toggle="tab" data-bs-target="#status" type="button" role="tab">
                                    <i class="fas fa-heartbeat me-2"></i>Status & Health
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="generator-tab" data-bs-toggle="tab" data-bs-target="#generator" type="button" role="tab">
                                    <i class="fas fa-dice me-2"></i>Random Generator
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="operations-tab" data-bs-toggle="tab" data-bs-target="#operations" type="button" role="tab">
                                    <i class="fas fa-cogs me-2"></i>Operations
                                </button>
                            </li>
                        </ul>
                    </div>
                    <div class="card-body">
                        <div class="tab-content" id="service-tabContent">
                            <!-- Status Tab -->
                            <div class="tab-pane fade show active" id="status" role="tabpanel">
                                <h5>Service Status</h5>
                                <div class="row g-3 mb-4">
                                    <div class="col-md-6">
                                        <div class="card bg-light">
                                            <div class="card-body text-center">
                                                <i class="fas fa-server text-primary fa-2x mb-2"></i>
                                                <h6>Service Health</h6>
                                                <span id="health-status" class="badge bg-warning">Checking...</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="card bg-light">
                                            <div class="card-body text-center">
                                                <i class="fas fa-shield-alt text-success fa-2x mb-2"></i>
                                                <h6>Enclave Status</h6>
                                                <span id="enclave-status" class="badge bg-warning">Checking...</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row g-3 mb-4">
                                    <div class="col-md-4">
                                        <div class="card bg-light">
                                            <div class="card-body text-center">
                                                <i class="fas fa-dice text-info fa-2x mb-2"></i>
                                                <h6>Random Numbers Generated</h6>
                                                <h4 id="numbers-generated">-</h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="card bg-light">
                                            <div class="card-body text-center">
                                                <i class="fas fa-chart-line text-success fa-2x mb-2"></i>
                                                <h6>Entropy Quality</h6>
                                                <h4 id="entropy-quality">-</h4>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="card bg-light">
                                            <div class="card-body text-center">
                                                <i class="fas fa-clock text-secondary fa-2x mb-2"></i>
                                                <h6>Uptime</h6>
                                                <h4 id="uptime">-</h4>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <button class="btn btn-primary" onclick="checkServiceHealth()">
                                    <i class="fas fa-sync-alt me-2"></i>Refresh Status
                                </button>
                            </div>

                            <!-- Random Generator Tab -->
                            <div class="tab-pane fade" id="generator" role="tabpanel">
                                <h5>Secure Random Number Generator</h5>
                                
                                <div class="row mb-4">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Output Format</label>
                                            <select class="form-select" id="output-format">
                                                <option value="hex">Hexadecimal</option>
                                                <option value="decimal">Decimal</option>
                                                <option value="binary">Binary</option>
                                                <option value="base64">Base64</option>
                                            </select>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Number of Bytes</label>
                                            <input type="number" class="form-control" id="byte-count" value="32" min="1" max="1024">
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Random Type</label>
                                            <select class="form-select" id="random-type">
                                                <option value="secure">Cryptographically Secure</option>
                                                <option value="vrf">Verifiable Random Function</option>
                                                <option value="beacon">Random Beacon</option>
                                            </select>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Seed (Optional)</label>
                                            <input type="text" class="form-control" id="seed-input" placeholder="Leave empty for true randomness">
                                        </div>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <button class="btn btn-success me-2" onclick="generateRandom()">
                                        <i class="fas fa-dice me-1"></i>Generate Random
                                    </button>
                                    <button class="btn btn-outline-secondary" onclick="clearOutput()">
                                        <i class="fas fa-trash me-1"></i>Clear
                                    </button>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Generated Random Output</label>
                                    <div class="random-output" id="random-output">
                                        Click "Generate Random" to create secure random numbers...
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <button class="btn btn-outline-primary btn-sm" onclick="copyToClipboard()">
                                        <i class="fas fa-copy me-1"></i>Copy to Clipboard
                                    </button>
                                    <button class="btn btn-outline-info btn-sm ms-2" onclick="verifyRandomness()">
                                        <i class="fas fa-check-circle me-1"></i>Verify Randomness
                                    </button>
                                </div>
                            </div>

                            <!-- Operations Tab -->
                            <div class="tab-pane fade" id="operations" role="tabpanel">
                                <h5>@Model.ServiceDisplayName Operations</h5>
                                
                                <div class="row g-3 mb-4">
                                    @foreach (var operation in Model.ServiceOperations)
                                    {
                                        <div class="col-md-6">
                                            <div class="card">
                                                <div class="card-body">
                                                    <h6><i class="fas fa-play-circle me-2"></i>@operation</h6>
                                                    <button class="btn btn-outline-primary btn-sm" onclick="executeOperation('@operation')">
                                                        Execute
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            checkServiceHealth();
        });

        async function checkServiceHealth() {
            try {
                updateServiceStatus('checking');
                
                // Check health from the SGX enclave service
                try {
                    const response = await fetch('/api/randomness/health');
                    if (response.ok) {
                        const healthData = await response.json();
                        
                        updateServiceStatus('online');
                        document.getElementById('health-status').textContent = 'Healthy';
                        document.getElementById('health-status').className = 'badge bg-success';
                        document.getElementById('enclave-status').textContent = 'Active';
                        document.getElementById('enclave-status').className = 'badge bg-success';
                        
                        // Update metrics from API
                        document.getElementById('numbers-generated').textContent = healthData.numbers_generated || '-';
                        document.getElementById('entropy-quality').textContent = healthData.entropy_quality || '-';
                        document.getElementById('uptime').textContent = healthData.uptime || '-';
                        
                        console.log('Health check successful:', healthData);
                        return;
                    }
                } catch (apiError) {
                    console.warn('API health check failed, using fallback:', apiError);
                }
                
                // Fallback to simulated health check
                await new Promise(resolve => setTimeout(resolve, 500));
                
                const isHealthy = Math.random() > 0.1;
                
                if (isHealthy) {
                    updateServiceStatus('online');
                    document.getElementById('health-status').textContent = 'Healthy';
                    document.getElementById('health-status').className = 'badge bg-success';
                    document.getElementById('enclave-status').textContent = 'Active';
                    document.getElementById('enclave-status').className = 'badge bg-success';
                    
                    // Update metrics
                    document.getElementById('numbers-generated').textContent = Math.floor(Math.random() * 100000 + 10000);
                    document.getElementById('entropy-quality').textContent = (Math.random() * 0.1 + 0.9).toFixed(3);
                    document.getElementById('uptime').textContent = Math.floor(Math.random() * 30 + 1) + 'd';
                } else {
                    updateServiceStatus('offline');
                    document.getElementById('health-status').textContent = 'Unhealthy';
                    document.getElementById('health-status').className = 'badge bg-danger';
                    document.getElementById('enclave-status').textContent = 'Inactive';
                    document.getElementById('enclave-status').className = 'badge bg-danger';
                }
            } catch (error) {
                console.error('Error checking service health:', error);
                updateServiceStatus('offline');
            }
        }

        function updateServiceStatus(status) {
            const statusElement = document.getElementById('service-status');
            
            switch (status) {
                case 'online':
                    statusElement.innerHTML = '<span class="status-indicator status-online"></span>Online';
                    statusElement.className = 'badge bg-success me-3';
                    break;
                case 'offline':
                    statusElement.innerHTML = '<span class="status-indicator status-offline"></span>Offline';
                    statusElement.className = 'badge bg-danger me-3';
                    break;
                case 'checking':
                    statusElement.innerHTML = '<span class="status-indicator status-checking"></span>Checking...';
                    statusElement.className = 'badge bg-warning me-3';
                    break;
            }
        }

        async function generateRandom() {
            try {
                const format = document.getElementById('output-format').value;
                const byteCount = parseInt(document.getElementById('byte-count').value);
                const randomType = document.getElementById('random-type').value;
                const seed = document.getElementById('seed-input').value;
                
                // Validate input
                if (byteCount <= 0 || byteCount > 1024) {
                    alert('Byte count must be between 1 and 1024');
                    return;
                }
                
                // Show loading state
                document.getElementById('random-output').textContent = 'Generating secure random numbers...';
                
                // Generate random numbers using SGX enclave service
                try {
                    const response = await fetch('/api/randomness/generate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            format: format,
                            byteCount: byteCount,
                            randomType: randomType,
                            seed: seed || null
                        })
                    });
                    
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    
                    const result = await response.json();
                    if (result.success) {
                        document.getElementById('random-output').textContent = result.data;
                        console.log('Generated using SGX enclave:', result.entropySource);
                        return;
                    } else {
                        throw new Error(result.error || 'Unknown server error');
                    }
                } catch (serverError) {
                    console.error('SGX enclave generation failed:', serverError);
                    document.getElementById('random-output').textContent = `Error: ${serverError.message}`;
                    return;
                }
                
            } catch (error) {
                console.error('Error generating random numbers:', error);
                document.getElementById('random-output').textContent = 'Error generating random numbers. Please try again.';
                alert('Error generating random numbers: ' + error.message);
            }
        }

        function clearOutput() {
            document.getElementById('random-output').textContent = 'Click "Generate Random" to create secure random numbers...';
        }

        function copyToClipboard() {
            const output = document.getElementById('random-output').textContent;
            if (output && output !== 'Click "Generate Random" to create secure random numbers...') {
                navigator.clipboard.writeText(output).then(() => {
                    alert('Random output copied to clipboard!');
                });
            } else {
                alert('No random output to copy. Generate some random numbers first.');
            }
        }

        function verifyRandomness() {
            alert('Verifying randomness quality using statistical tests...');
        }

        async function executeOperation(operation) {
            try {
                console.log('Executing operation:', operation);
                alert(`Executing ${operation} operation...`);
            } catch (error) {
                console.error('Error executing operation:', error);
            }
        }
    </script>
</body>
</html> 