#
# SGX Makefile for Neo Service Layer Enclave
# Supports both simulation (SGX_MODE=SIM) and hardware (SGX_MODE=HW) modes
#

include $(SGX_SDK)/buildenv.mk

# Application settings
Enclave_Name := NeoServiceEnclave
Enclave_Config_File := enclave.config.xml

# Directories
SGX_SDK ?= /opt/intel/sgxsdk
SGX_MODE ?= SIM
SGX_ARCH ?= x64
SGX_DEBUG ?= 1

ifeq ($(shell getconf LONG_BIT), 32)
	SGX_ARCH := x86
else ifeq ($(findstring -m32, $(CXXFLAGS)), -m32)
	SGX_ARCH := x86
endif

ifeq ($(SGX_ARCH), x86)
	SGX_COMMON_FLAGS := -m32
	SGX_LIBRARY_PATH := $(SGX_SDK)/lib
	SGX_ENCLAVE_SIGNER := $(SGX_SDK)/bin/x86/sgx_sign
	SGX_EDGER8R := $(SGX_SDK)/bin/x86/sgx_edger8r
else
	SGX_COMMON_FLAGS := -m64
	SGX_LIBRARY_PATH := $(SGX_SDK)/lib64
	SGX_ENCLAVE_SIGNER := $(SGX_SDK)/bin/x64/sgx_sign
	SGX_EDGER8R := $(SGX_SDK)/bin/x64/sgx_edger8r
endif

ifeq ($(SGX_DEBUG), 1)
ifeq ($(SGX_PRERELEASE), 1)
$(error Cannot set SGX_DEBUG and SGX_PRERELEASE at the same time!!)
endif
endif

ifeq ($(SGX_DEBUG), 1)
        SGX_COMMON_FLAGS += -O0 -g
else
        SGX_COMMON_FLAGS += -O2
endif

SGX_COMMON_FLAGS += -Wall -Wextra -Winit-self -Wpointer-arith -Wreturn-type \
                    -Waddress -Wsequence-point -Wformat-security \
                    -Wmissing-include-dirs -Wfloat-equal -Wundef -Wshadow \
                    -Wcast-align -Wcast-qual -Wconversion -Wredundant-decls

SGX_COMMON_CFLAGS := $(SGX_COMMON_FLAGS) -Wjump-misses-init -Wstrict-prototypes -Wunsuffixed-float-constants
SGX_COMMON_CXXFLAGS := $(SGX_COMMON_FLAGS) -Wnon-virtual-dtor -std=c++17

# Enclave settings
Enclave_Include_Paths := -I$(SGX_SDK)/include -I$(SGX_SDK)/include/tlibc -I$(SGX_SDK)/include/libcxx -Iinclude

Enclave_C_Flags := $(SGX_COMMON_CFLAGS) -nostdinc -fvisibility=hidden -fpie -ffunction-sections -fdata-sections $(Enclave_Include_Paths)
Enclave_Cpp_Flags := $(SGX_COMMON_CXXFLAGS) -nostdinc++ -fvisibility=hidden -fpie -ffunction-sections -fdata-sections -nostdinc $(Enclave_Include_Paths)

# Source files
Enclave_Cpp_Files := src/enclave_main.cpp
Enclave_C_Files := 

# Untrusted application files (for OCALLs)
App_Cpp_Files := src/test_app.cpp src/enclave_ocalls.cpp
App_C_Files :=

# Object files
Enclave_Cpp_Objects := $(Enclave_Cpp_Files:.cpp=.o)
Enclave_C_Objects := $(Enclave_C_Files:.c=.o)
App_Cpp_Objects := $(App_Cpp_Files:.cpp=.o)
App_C_Objects := $(App_C_Files:.c=.o)

# Untrusted application settings
App_Include_Paths := -I$(SGX_SDK)/include -Iinclude
App_C_Flags := $(SGX_COMMON_CFLAGS) -fPIC -Wno-attributes $(App_Include_Paths)
App_Cpp_Flags := $(SGX_COMMON_CXXFLAGS) -fPIC -Wno-attributes $(App_Include_Paths)
App_Link_Flags := $(SGX_COMMON_FLAGS) -L$(SGX_LIBRARY_PATH) -lsgx_urts -lpthread -lcurl

# Enable simulation mode crypto optimizations
ifeq ($(SGX_MODE), SIM)
	Enclave_C_Flags += -DSGX_SIM_MODE
	Enclave_Cpp_Flags += -DSGX_SIM_MODE
	App_Link_Flags += -lsgx_uae_service_sim
else
	App_Link_Flags += -lsgx_uae_service
endif

# Enclave link flags
Enclave_Link_Flags := $(SGX_COMMON_FLAGS) -Wl,--no-undefined -nostdlib -nodefaultlibs -nostartfiles -L$(SGX_LIBRARY_PATH) \
	-Wl,--whole-archive -lsgx_trts -Wl,--no-whole-archive \
	-Wl,--start-group -lsgx_tstdc -lsgx_tcxx -lsgx_tcrypto -lsgx_tservice -Wl,--end-group \
	-Wl,-Bstatic -Wl,-Bsymbolic -Wl,--no-undefined \
	-Wl,-pie,-eenclave_entry -Wl,--export-dynamic  \
	-Wl,--defsym,__ImageBase=0 -Wl,--gc-sections   \
	-Wl,--version-script=$(Enclave_Name).lds

Enclave_Name_Signed := $(Enclave_Name).signed.so
Enclave_Name_Unsigned := $(Enclave_Name).so
App_Name := sgx_app

# Targets
.PHONY: all clean app

all: $(Enclave_Name_Signed) $(App_Name)

app: $(App_Name)

# Generate trusted and untrusted code from EDL
$(Enclave_Name)_t.h: $(SGX_EDGER8R) $(Enclave_Name).edl
	@echo "GEN  =>  $@"
	@$(SGX_EDGER8R) --trusted $(Enclave_Name).edl --search-path $(SGX_SDK)/include --search-path $(CUSTOM_EDL_PATH)
	@echo "Enclave trusted code => $(Enclave_Name)_t.h"

$(Enclave_Name)_t.c: $(Enclave_Name)_t.h

$(Enclave_Name)_u.h: $(SGX_EDGER8R) $(Enclave_Name).edl
	@echo "GEN  =>  $@"
	@$(SGX_EDGER8R) --untrusted $(Enclave_Name).edl --search-path $(SGX_SDK)/include --search-path $(CUSTOM_EDL_PATH)
	@echo "Enclave untrusted code => $(Enclave_Name)_u.h"

$(Enclave_Name)_u.c: $(Enclave_Name)_u.h

# Build enclave object files
%.o: %.cpp $(Enclave_Name)_t.h
	@echo "CXX  <=  $<"
	@$(CXX) $(Enclave_Cpp_Flags) -c $< -o $@

%.o: %.c $(Enclave_Name)_t.h
	@echo "CC   <=  $<"
	@$(CC) $(Enclave_C_Flags) -c $< -o $@

$(Enclave_Name)_t.o: $(Enclave_Name)_t.c
	@echo "CC   <=  $<"
	@$(CC) $(Enclave_C_Flags) -c $< -o $@

# Build untrusted application object files
src/test_app.o: src/test_app.cpp $(Enclave_Name)_u.h
	@echo "CXX(app) <=  $<"
	@$(CXX) $(App_Cpp_Flags) -c $< -o $@

src/enclave_ocalls.o: src/enclave_ocalls.cpp $(Enclave_Name)_u.h
	@echo "CXX(app) <=  $<"
	@$(CXX) $(App_Cpp_Flags) -c $< -o $@

$(Enclave_Name)_u.o: $(Enclave_Name)_u.c
	@echo "CC(app)  <=  $<"
	@$(CC) $(App_C_Flags) -c $< -o $@

# Build untrusted application
$(App_Name): $(App_Cpp_Objects) $(App_C_Objects) $(Enclave_Name)_u.o
	@echo "LINK(app) => $@"
	@$(CXX) $(App_Cpp_Objects) $(App_C_Objects) $(Enclave_Name)_u.o -o $@ $(App_Link_Flags)
	@echo "Untrusted application built successfully"

# Build enclave shared library
$(Enclave_Name_Unsigned): $(Enclave_Name).lds $(Enclave_Cpp_Objects) $(Enclave_C_Objects) $(Enclave_Name)_t.o
	@echo "LINK =>  $@"
	@$(CXX) $(Enclave_Cpp_Objects) $(Enclave_C_Objects) $(Enclave_Name)_t.o -o $@ $(Enclave_Link_Flags)
	@echo "Enclave built in simulation mode: SGX_MODE=$(SGX_MODE)"

# Sign the enclave
$(Enclave_Name_Signed): $(Enclave_Name_Unsigned)
	@echo "SIGN =>  $@"
ifeq ($(SGX_MODE), HW)
	@$(SGX_ENCLAVE_SIGNER) sign -key $(Enclave_Name)_private.pem -enclave $(Enclave_Name_Unsigned) -out $@ -config $(Enclave_Config_File)
else
	@$(SGX_ENCLAVE_SIGNER) sign -key $(Enclave_Name)_private.pem -enclave $(Enclave_Name_Unsigned) -out $@ -config $(Enclave_Config_File)
endif
	@echo "Enclave signed successfully"

# Create enclave config file if it doesn't exist
$(Enclave_Config_File):
	@echo "Creating default enclave configuration..."
	@echo '<?xml version="1.0" encoding="UTF-8"?>' > $@
	@echo '<EnclaveConfiguration>' >> $@
	@echo '  <ProdID>0</ProdID>' >> $@
	@echo '  <ISVSVN>0</ISVSVN>' >> $@
	@echo '  <ReleaseType>SIM</ReleaseType>' >> $@
	@echo '  <IntelSigned>FALSE</IntelSigned>' >> $@
	@echo '  <DisableDebug>FALSE</DisableDebug>' >> $@
	@echo '  <MiscSelect>0x00000000</MiscSelect>' >> $@
	@echo '  <MiscMask>0xFFFFFFFF</MiscMask>' >> $@
	@echo '  <EnableKSS>FALSE</EnableKSS>' >> $@
	@echo '  <TCSPolicy>1</TCSPolicy>' >> $@
	@echo '  <StackMaxSize>0x40000</StackMaxSize>' >> $@
	@echo '  <HeapMaxSize>0x100000</HeapMaxSize>' >> $@
	@echo '  <HeapInitSize>0x80000</HeapInitSize>' >> $@
	@echo '  <HeapMinSize>0x10000</HeapMinSize>' >> $@
	@echo '  <ReservedMemMaxSize>0x100000</ReservedMemMaxSize>' >> $@
	@echo '  <ReservedMemInitSize>0x80000</ReservedMemInitSize>' >> $@
	@echo '  <ReservedMemMinSize>0x10000</ReservedMemMinSize>' >> $@
	@echo '</EnclaveConfiguration>' >> $@

# Create linker script if it doesn't exist
$(Enclave_Name).lds:
	@echo "Creating default linker script..."
	@echo '$(Enclave_Name)' > $@
	@echo '{' >> $@
	@echo '    global:' >> $@
	@echo '        g_global_data_sim;' >> $@
	@echo '        g_global_data;' >> $@
	@echo '        enclave_entry;' >> $@
	@echo '        g_peak_heap_used;' >> $@
	@echo '    local:' >> $@
	@echo '        *;' >> $@
	@echo '};' >> $@

# Generate signing key if it doesn't exist
$(Enclave_Name)_private.pem:
	@echo "Generating enclave signing key..."
	@openssl genrsa -out $@ -3 3072

# Test targets for SGX simulation mode
.PHONY: test-sim setup-sim-env

setup-sim-env:
	@echo "Setting up SGX simulation environment..."
	@export SGX_MODE=SIM
	@echo "SGX_MODE=SIM" > .env
	@echo "SGX_DEBUG=1" >> .env
	@echo "✅ SGX simulation environment configured"

test-sim: $(Enclave_Name_Signed) $(App_Name) setup-sim-env
	@echo "Testing SGX enclave in simulation mode..."
	@echo "Enclave file: $(Enclave_Name_Signed)"
	@echo "Application file: $(App_Name)"
	@if [ -f "$(Enclave_Name_Signed)" ] && [ -f "$(App_Name)" ]; then \
		echo "✅ Enclave and application built successfully for simulation mode"; \
		ls -la $(Enclave_Name_Signed) $(App_Name); \
		echo "Running basic enclave test..."; \
		./$(App_Name) || echo "⚠️  Application test failed (expected in development)"; \
	else \
		echo "❌ Build failed"; \
		exit 1; \
	fi

# Clean targets
clean:
	@rm -f $(Enclave_Name)_t.* $(Enclave_Name)_u.* *.o src/*.o $(Enclave_Name_Unsigned) $(Enclave_Name_Signed) $(App_Name)

clean-all: clean
	@rm -f $(Enclave_Config_File) $(Enclave_Name).lds $(Enclave_Name)_private.pem .env

# Help target
help:
	@echo "Neo Service Layer SGX Enclave Build System"
	@echo ""
	@echo "Targets:"
	@echo "  all           - Build signed enclave (default)"
	@echo "  setup-sim-env - Setup SGX simulation environment"
	@echo "  test-sim      - Build and test in simulation mode"
	@echo "  clean         - Clean build artifacts"
	@echo "  clean-all     - Clean everything including config files"
	@echo "  help          - Show this help"
	@echo ""
	@echo "Environment Variables:"
	@echo "  SGX_MODE      - SIM (simulation) or HW (hardware) - default: SIM"
	@echo "  SGX_DEBUG     - 1 (debug) or 0 (release) - default: 1"
	@echo "  SGX_SDK       - Path to SGX SDK - default: /opt/intel/sgxsdk"
	@echo ""
	@echo "Examples:"
	@echo "  make SGX_MODE=SIM test-sim    # Build and test in simulation mode"
	@echo "  make SGX_MODE=HW all          # Build for hardware mode"
	@echo "  make SGX_DEBUG=0 all          # Build in release mode" 