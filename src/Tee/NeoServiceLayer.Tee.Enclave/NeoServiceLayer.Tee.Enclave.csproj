<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <PackageDescription>Neo Service Layer SGX Enclave and Occlum LibOS integration providing secure, privacy-preserving computation capabilities.</PackageDescription>
    <AssemblyTitle>Neo Service Layer TEE Enclave</AssemblyTitle>
  </PropertyGroup>

  <!-- SGX and Occlum LibOS Dependencies -->
  <ItemGroup>
    <!-- Core .NET Dependencies -->
    <PackageReference Include="Microsoft.Extensions.Logging" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" />
    <PackageReference Include="Microsoft.Extensions.Configuration" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" />
    
    <!-- JSON Handling -->
    <PackageReference Include="System.Text.Json" />
    
    <!-- Memory and Performance - removed as they're included in .NET 8 -->
  </ItemGroup>

  <!-- Project References -->
  <ItemGroup>
    <ProjectReference Include="../../Core/NeoServiceLayer.Shared/NeoServiceLayer.Shared.csproj" />
    <ProjectReference Include="../../Core/NeoServiceLayer.Core/NeoServiceLayer.Core.csproj" />
  </ItemGroup>

  <!-- Native Library References -->
  <ItemGroup Condition="'$(EnableSGXSupport)' == 'true'">
    <!-- Linux SGX Libraries -->
    <NativeLibrary Include="$(SGXLibraryPath)/libsgx_urts.so" 
                   Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true' AND Exists('$(SGXLibraryPath)/libsgx_urts.so')" />
    <NativeLibrary Include="$(SGXLibraryPath)/libsgx_urts_sim.so" 
                   Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true' AND Exists('$(SGXLibraryPath)/libsgx_urts_sim.so')" />
    <NativeLibrary Include="$(SGXLibraryPath)/libsgx_uae_service.so" 
                   Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true' AND Exists('$(SGXLibraryPath)/libsgx_uae_service.so')" />
    
    <!-- Windows SGX Libraries -->
    <NativeLibrary Include="$(SGXLibraryPath)/sgx_urts.dll" 
                   Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true' AND Exists('$(SGXLibraryPath)/sgx_urts.dll')" />
    <NativeLibrary Include="$(SGXLibraryPath)/sgx_urts_sim.dll" 
                   Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true' AND Exists('$(SGXLibraryPath)/sgx_urts_sim.dll')" />
    <NativeLibrary Include="$(SGXLibraryPath)/sgx_uae_service.dll" 
                   Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true' AND Exists('$(SGXLibraryPath)/sgx_uae_service.dll')" />
  </ItemGroup>

  <!-- Enclave Library Reference -->
  <ItemGroup Condition="'$(EnableOcclumSupport)' == 'true'">
    <NativeLibrary Include="$(MSBuildProjectDirectory)/target/$(RustBuildMode)/libneo_service_enclave.so" 
                   Condition="Exists('$(MSBuildProjectDirectory)/target/$(RustBuildMode)/libneo_service_enclave.so')" />
  </ItemGroup>

  <!-- Exclude problematic partial class files temporarily -->
  <ItemGroup>
    <Compile Remove="EnclaveWrapperCore.cs" />
    <Compile Remove="EnclaveWrapperCrypto.cs" />
    <Compile Remove="EnclaveWrapperAI.cs" />
    <Compile Remove="EnclaveWrapperStorage.cs" />
    <Compile Remove="EnclaveWrapperCompute.cs" />
  </ItemGroup>

  <!-- Content Files -->
  <ItemGroup>
    <!-- Rust Configuration -->
    <Content Include="Cargo.toml" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="src/**/*.rs" CopyToOutputDirectory="PreserveNewest" />
    
    <!-- Occlum Configuration -->
    <Content Include="Dockerfile.occlum" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="Occlum.json" CopyToOutputDirectory="PreserveNewest" Condition="Exists('Occlum.json')" />
    
    <!-- SGX Configuration -->
    <Content Include="Enclave/Enclave.config.xml" CopyToOutputDirectory="PreserveNewest" Condition="Exists('Enclave/Enclave.config.xml')" />
    <Content Include="Enclave/Enclave.edl" CopyToOutputDirectory="PreserveNewest" Condition="Exists('Enclave/Enclave.edl')" />
    
    <!-- Build Scripts -->
    <Content Include="build-*.sh" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="build-*.ps1" CopyToOutputDirectory="PreserveNewest" />
    
    <!-- Documentation -->
    <Content Include="README.md" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <!-- Conditional Compilation Symbols -->
  <PropertyGroup Condition="'$(SGX_MODE)' == 'SIM'">
    <DefineConstants>$(DefineConstants);SGX_SIMULATION_MODE</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(SGX_MODE)' == 'HW'">
    <DefineConstants>$(DefineConstants);SGX_HARDWARE_MODE</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(EnableOcclumSupport)' == 'true'">
    <DefineConstants>$(DefineConstants);OCCLUM_LIBOS_ENABLED</DefineConstants>
  </PropertyGroup>

  <!-- Runtime Configuration -->
  <ItemGroup>
    <RuntimeHostConfigurationOption Include="System.Globalization.Invariant" Value="false" />
    <RuntimeHostConfigurationOption Include="System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization" Value="false" />
  </ItemGroup>

  <!-- Post-Build Tasks -->
  <Target Name="PostBuildValidation" AfterTargets="PostBuildEvent">
    <Message Text="Validating enclave build outputs..." Importance="normal" />
    
    <!-- Validate native libraries are present -->
    <Warning Condition="'$(EnableSGXSupport)' == 'true' AND !Exists('$(OutputPath)runtimes/$(RuntimeIdentifier)/native')" 
             Text="Native libraries directory not found. SGX functionality may not work correctly." />
    
    <!-- Validate Rust enclave library -->
    <Warning Condition="'$(EnableOcclumSupport)' == 'true' AND !Exists('$(OutputPath)runtimes/$(RuntimeIdentifier)/native/libneo_service_enclave.so')" 
             Text="Rust enclave library not found. Run 'cargo build' in the enclave directory." />
    
    <Message Text="Enclave build validation completed" Importance="normal" />
  </Target>

  <!-- Development Dependencies (Debug only) -->
  <ItemGroup Condition="'$(Configuration)' == 'Debug'">
    <PackageReference Include="Microsoft.Extensions.Logging.Console" />
    <PackageReference Include="Microsoft.Extensions.Logging.Debug" />
  </ItemGroup>

  <!-- Analysis and Code Quality -->
  <PropertyGroup>
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
    <AnalysisLevel>latest-recommended</AnalysisLevel>
    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
  </PropertyGroup>

  <!-- Documentation Generation -->
  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

</Project>
