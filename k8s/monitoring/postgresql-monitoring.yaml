apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-exporter
  namespace: neo-service-layer
  labels:
    app: postgres-exporter
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-exporter
      component: monitoring
  template:
    metadata:
      labels:
        app: postgres-exporter
        component: monitoring
    spec:
      containers:
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.15.0
        ports:
        - containerPort: 9187
          name: http-metrics
        env:
        - name: DATA_SOURCE_NAME
          valueFrom:
            secretKeyRef:
              name: neo-postgres-secret
              key: CONNECTION_STRING
        - name: PG_EXPORTER_EXTEND_QUERY_PATH
          value: /etc/postgres_exporter/queries.yaml
        - name: PG_EXPORTER_DISABLE_DEFAULT_METRICS
          value: "false"
        - name: PG_EXPORTER_AUTO_DISCOVER_DATABASES
          value: "true"
        volumeMounts:
        - name: postgres-exporter-config
          mountPath: /etc/postgres_exporter
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: postgres-exporter-config
        configMap:
          name: postgres-exporter-config
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-exporter-service
  namespace: neo-service-layer
  labels:
    app: postgres-exporter
    component: monitoring
spec:
  ports:
  - port: 9187
    targetPort: 9187
    name: http-metrics
  selector:
    app: postgres-exporter
    component: monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-exporter-config
  namespace: neo-service-layer
  labels:
    app: postgres-exporter
    component: monitoring
data:
  queries.yaml: |
    # Custom PostgreSQL metrics for Neo Service Layer
    
    # SGX Enclave Storage metrics
    sgx_sealed_data_total:
      query: "SELECT COUNT(*) as total FROM sgx.sealed_data_items WHERE is_active = true"
      master: true
      metrics:
        - total:
            usage: "GAUGE"
            description: "Total number of active sealed data items"
    
    sgx_sealed_data_by_service:
      query: |
        SELECT service_name, COUNT(*) as count 
        FROM sgx.sealed_data_items 
        WHERE is_active = true 
        GROUP BY service_name
      master: true
      metrics:
        - count:
            usage: "GAUGE"
            description: "Number of sealed data items by service"
            key_labels:
              - service_name
    
    sgx_expired_data_items:
      query: |
        SELECT COUNT(*) as expired_count 
        FROM sgx.sealed_data_items 
        WHERE is_active = true AND expires_at < NOW()
      master: true
      metrics:
        - expired_count:
            usage: "GAUGE"
            description: "Number of expired sealed data items"
    
    # Oracle Data Feed metrics
    oracle_active_feeds:
      query: "SELECT COUNT(*) as active_feeds FROM oracle.oracle_data_feeds WHERE is_active = true"
      master: true
      metrics:
        - active_feeds:
            usage: "GAUGE"
            description: "Number of active oracle data feeds"
    
    oracle_feed_updates:
      query: |
        SELECT feed_type, COUNT(*) as update_count 
        FROM oracle.feed_history fh
        JOIN oracle.oracle_data_feeds odf ON fh.feed_id = odf.id
        WHERE fh.recorded_at > NOW() - INTERVAL '1 hour'
        GROUP BY feed_type
      master: true
      metrics:
        - update_count:
            usage: "GAUGE"
            description: "Number of feed updates in the last hour by type"
            key_labels:
              - feed_type
    
    # Voting system metrics
    voting_active_proposals:
      query: |
        SELECT COUNT(*) as active_proposals 
        FROM voting.voting_proposals 
        WHERE is_active = true AND starts_at <= NOW() AND ends_at > NOW()
      master: true
      metrics:
        - active_proposals:
            usage: "GAUGE"
            description: "Number of currently active voting proposals"
    
    voting_recent_votes:
      query: |
        SELECT COUNT(*) as recent_votes 
        FROM voting.votes 
        WHERE cast_at > NOW() - INTERVAL '24 hours' AND is_valid = true
      master: true
      metrics:
        - recent_votes:
            usage: "GAUGE"
            description: "Number of votes cast in the last 24 hours"
    
    # Cross-chain operations metrics
    crosschain_pending_operations:
      query: |
        SELECT source_chain, target_chain, COUNT(*) as pending_count
        FROM crosschain.cross_chain_operations 
        WHERE status = 'Pending'
        GROUP BY source_chain, target_chain
      master: true
      metrics:
        - pending_count:
            usage: "GAUGE"
            description: "Number of pending cross-chain operations"
            key_labels:
              - source_chain
              - target_chain
    
    crosschain_operation_success_rate:
      query: |
        SELECT 
          operation_type,
          COUNT(*) FILTER (WHERE status = 'Completed') * 100.0 / COUNT(*) as success_rate
        FROM crosschain.cross_chain_operations 
        WHERE created_at > NOW() - INTERVAL '24 hours'
        GROUP BY operation_type
      master: true
      metrics:
        - success_rate:
            usage: "GAUGE"
            description: "Success rate of cross-chain operations in the last 24 hours"
            key_labels:
              - operation_type
    
    # Database performance metrics
    database_size_by_schema:
      query: |
        SELECT 
          schemaname,
          pg_size_bytes(SUM(pg_total_relation_size(schemaname||'.'||tablename))) as size_bytes
        FROM pg_stat_user_tables 
        WHERE schemaname IN ('core', 'sgx', 'oracle', 'voting', 'crosschain', 'monitoring')
        GROUP BY schemaname
      master: true
      metrics:
        - size_bytes:
            usage: "GAUGE"
            description: "Database size in bytes by schema"
            key_labels:
              - schemaname
    
    table_bloat_estimation:
      query: |
        SELECT 
          schemaname||'.'||tablename as full_table_name,
          n_dead_tup * 100.0 / GREATEST(n_live_tup + n_dead_tup, 1) as bloat_percentage
        FROM pg_stat_user_tables 
        WHERE n_live_tup + n_dead_tup > 100
      master: true
      metrics:
        - bloat_percentage:
            usage: "GAUGE"
            description: "Estimated table bloat percentage"
            key_labels:
              - full_table_name