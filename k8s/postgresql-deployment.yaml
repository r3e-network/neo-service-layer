apiVersion: v1
kind: Namespace
metadata:
  name: neo-service-layer
  labels:
    name: neo-service-layer
    app.kubernetes.io/name: neo-service-layer
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: neo-service-layer
type: Opaque
stringData:
  postgres-password: "neo_secure_password_2024_k8s"
  postgres-user: "neo_user"
  postgres-db: "neo_service_layer"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: neo-service-layer
data:
  postgresql.conf: |
    # PostgreSQL configuration for Neo Service Layer in Kubernetes
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    
    # Memory settings for Kubernetes
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 16MB
    maintenance_work_mem = 128MB
    
    # SSL Configuration
    ssl = on
    ssl_prefer_server_ciphers = on
    
    # WAL settings
    wal_level = replica
    wal_buffers = 16MB
    max_wal_size = 2GB
    min_wal_size = 80MB
    
    # Logging
    log_min_duration_statement = 1000
    log_connections = on
    log_disconnections = on
    log_checkpoints = on
    log_lock_waits = on
    log_timezone = 'UTC'
    
    # Performance
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Autovacuum
    autovacuum = on
    log_autovacuum_min_duration = 1000
    
    # Extensions
    shared_preload_libraries = 'pg_stat_statements'
    
  init.sql: |
    -- Neo Service Layer PostgreSQL Database Initialization for Kubernetes
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    -- Create application schemas
    CREATE SCHEMA IF NOT EXISTS core;
    CREATE SCHEMA IF NOT EXISTS auth;
    CREATE SCHEMA IF NOT EXISTS sgx;
    CREATE SCHEMA IF NOT EXISTS keymanagement;
    CREATE SCHEMA IF NOT EXISTS oracle;
    CREATE SCHEMA IF NOT EXISTS voting;
    CREATE SCHEMA IF NOT EXISTS crosschain;
    CREATE SCHEMA IF NOT EXISTS monitoring;
    CREATE SCHEMA IF NOT EXISTS eventsourcing;
    
    -- Grant permissions
    GRANT ALL PRIVILEGES ON ALL SCHEMAS IN DATABASE neo_service_layer TO neo_user;
    
    -- Create cleanup function
    CREATE OR REPLACE FUNCTION cleanup_expired_data()
    RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
        deleted_count integer;
    BEGIN
        DELETE FROM sgx.sealed_data_items WHERE expires_at < NOW();
        DELETE FROM auth.authentication_sessions WHERE expires_at < NOW();
    END;
    $$;
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: neo-service-layer
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd  # Adjust based on your cluster's storage classes
  resources:
    requests:
      storage: 100Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: neo-service-layer
  labels:
    app: postgres
    component: database
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      initContainers:
      - name: postgres-init
        image: postgres:16-alpine
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: postgres-db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /docker-entrypoint-initdb.d/init.sql
          subPath: init.sql
        command:
        - sh
        - -c
        - |
          echo "Initializing PostgreSQL data directory..."
          if [ ! -d "$PGDATA" ]; then
            mkdir -p "$PGDATA"
            chown -R postgres:postgres "$PGDATA"
            chmod 700 "$PGDATA"
            su-exec postgres initdb -D "$PGDATA" --auth-host=scram-sha-256
          fi
          echo "PostgreSQL initialization complete"
      containers:
      - name: postgres
        image: postgres:16-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: postgres-db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        command:
        - postgres
        - -c
        - config_file=/etc/postgresql/postgresql.conf
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: neo-service-layer
  labels:
    app: postgres
    component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  namespace: neo-service-layer
  labels:
    app: postgres
    component: database
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-cleanup
  namespace: neo-service-layer
spec:
  schedule: "*/5 * * * *"  # Every 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: cleanup
            image: postgres:16-alpine
            env:
            - name: PGHOST
              value: "postgres"
            - name: PGPORT
              value: "5432"
            - name: PGDATABASE
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: postgres-db
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: postgres-user
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: postgres-password
            command:
            - psql
            - -c
            - SELECT cleanup_expired_data();
---
apiVersion: v1
kind: Secret
metadata:
  name: neo-app-secrets
  namespace: neo-service-layer
type: Opaque
stringData:
  jwt-secret-key: "MyUniqueSecretKeyForNeoServiceLayerThatIsLongEnoughAndSecureForProductionUse2024!"
  sgx-encryption-key: "SGXEncryptionKeyForConfidentialComputingInKubernetes2024!"
  key-management-master-key: "KeyManagementMasterKeyForSecureCryptographicOperations2024!"
  connection-string: "Host=postgres;Port=5432;Database=neo_service_layer;Username=neo_user;Password=neo_secure_password_2024_k8s;SSL Mode=Require;Trust Server Certificate=true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: neo-app-config
  namespace: neo-service-layer
data:
  appsettings.json: |
    {
      "Logging": {
        "LogLevel": {
          "Default": "Information",
          "Microsoft": "Warning",
          "NeoServiceLayer": "Debug"
        }
      },
      "ConnectionStrings": {
        "DefaultConnection": "Host=postgres;Port=5432;Database=neo_service_layer;Username=neo_user;Password=neo_secure_password_2024_k8s;SSL Mode=Require;Trust Server Certificate=true"
      },
      "SGX": {
        "EnableHardwareMode": false,
        "Database": {
          "EnableEncryption": true,
          "EnableIntegrityChecking": true,
          "DataRetentionDays": 90
        }
      },
      "Oracle": {
        "DataSources": {
          "CoinGecko": {
            "BaseUrl": "https://api.coingecko.com/api/v3",
            "RateLimitPerMinute": 50
          }
        }
      },
      "Voting": {
        "QuorumThreshold": 0.6,
        "VotingPeriodHours": 168
      },
      "KeyManagement": {
        "RotationIntervalDays": 90,
        "MinKeySize": 2048
      },
      "MaxStorageSize": 1073741824,
      "HealthChecks": {
        "UI": {
          "EvaluationTimeInSeconds": 10
        }
      }
    }
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: postgres-monitor
  namespace: neo-service-layer
  labels:
    app: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  endpoints:
  - port: postgres
    interval: 30s
    path: /metrics
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-network-policy
  namespace: neo-service-layer
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          component: neo-service
    ports:
    - protocol: TCP
      port: 5432