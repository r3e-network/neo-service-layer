apiVersion: v1
kind: Namespace
metadata:
  name: neo-argocd
  labels:
    name: neo-argocd
    istio-injection: enabled

---
apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: neo-argocd
  namespace: neo-argocd
spec:
  server:
    replicas: 2
    host: argocd.neo-service-layer.com
    insecure: false
    grpc:
      host: argocd-grpc.neo-service-layer.com
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 200m
    config:
      url: https://argocd.neo-service-layer.com
      application.instanceLabelKey: argocd.argoproj.io/instance
      oidc.config: |
        name: Neo Auth
        issuer: https://auth.neo-service-layer.com
        clientId: argocd
        clientSecret: $argocd-oidc-secret:clientSecret
        requestedScopes: ["openid", "profile", "email", "groups"]
        requestedIDTokenClaims: {"groups": {"essential": true}}
      policy.default: role:readonly
      policy.csv: |
        p, role:admin, applications, *, */*, allow
        p, role:admin, clusters, *, *, allow
        p, role:admin, repositories, *, *, allow
        g, argocd-admins, role:admin

  dex:
    openShiftOAuth: false
    resources:
      requests:
        memory: 128Mi
        cpu: 50m
      limits:
        memory: 256Mi
        cpu: 100m

  controller:
    replicas: 2
    resources:
      requests:
        memory: 1Gi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 1
    env:
    - name: ARGOCD_CONTROLLER_REPLICAS
      value: "2"

  repoServer:
    replicas: 2
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 200m
    env:
    - name: ARGOCD_EXEC_TIMEOUT
      value: "300s"

  redis:
    resources:
      requests:
        memory: 128Mi
        cpu: 50m
      limits:
        memory: 256Mi
        cpu: 100m

  rbac:
    defaultPolicy: 'role:readonly'
    policy: |
      g, argocd-admins, role:admin
      g, neo-developers, role:developer
    scopes: '[groups]'

---
apiVersion: v1
kind: Secret
metadata:
  name: argocd-oidc-secret
  namespace: neo-argocd
  labels:
    app.kubernetes.io/name: argocd-secret
    app.kubernetes.io/part-of: argocd
type: Opaque
data:
  clientSecret: bmVvLWFyZ29jZC1vaWRjLXNlY3JldA==  # neo-argocd-oidc-secret

---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: neo-services-app-of-apps
  namespace: neo-argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
spec:
  project: neo-services
  source:
    repoURL: https://github.com/neo-service-layer/gitops-config
    targetRevision: HEAD
    path: applications
  destination:
    server: https://kubernetes.default.svc
    namespace: neo-argocd
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - Validate=false
    - CreateNamespace=true
    - PrunePropagationPolicy=foreground
    - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m

---
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: neo-services
  namespace: neo-argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
spec:
  description: Neo Service Layer Microservices
  sourceRepos:
  - 'https://github.com/neo-service-layer/*'
  - 'https://charts.bitnami.com/bitnami'
  - 'https://jaegertracing.github.io/helm-charts'
  - 'https://prometheus-community.github.io/helm-charts'
  destinations:
  - namespace: neo-*
    server: https://kubernetes.default.svc
  - namespace: istio-system
    server: https://kubernetes.default.svc
  clusterResourceWhitelist:
  - group: ''
    kind: Namespace
  - group: rbac.authorization.k8s.io
    kind: ClusterRole
  - group: rbac.authorization.k8s.io
    kind: ClusterRoleBinding
  - group: security.istio.io
    kind: PeerAuthentication
  - group: networking.istio.io
    kind: Gateway
  - group: networking.istio.io
    kind: VirtualService
  - group: networking.istio.io
    kind: DestinationRule
  namespaceResourceWhitelist:
  - group: ''
    kind: ConfigMap
  - group: ''
    kind: Secret
  - group: ''
    kind: Service
  - group: ''
    kind: ServiceAccount
  - group: apps
    kind: Deployment
  - group: apps
    kind: StatefulSet
  - group: batch
    kind: Job
  - group: batch
    kind: CronJob
  - group: networking.k8s.io
    kind: NetworkPolicy
  roles:
  - name: developer
    description: Developer access to Neo services
    policies:
    - p, proj:neo-services:developer, applications, get, neo-services/*, allow
    - p, proj:neo-services:developer, applications, sync, neo-services/*, allow
    - p, proj:neo-services:developer, applications, action/*, neo-services/*, allow
    - p, proj:neo-services:developer, repositories, get, *, allow
    groups:
    - neo-developers
  - name: admin
    description: Admin access to Neo services
    policies:
    - p, proj:neo-services:admin, applications, *, neo-services/*, allow
    - p, proj:neo-services:admin, repositories, *, *, allow
    - p, proj:neo-services:admin, clusters, *, *, allow
    groups:
    - argocd-admins

---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: neo-auth-service
  namespace: neo-argocd
spec:
  project: neo-services
  source:
    repoURL: https://github.com/neo-service-layer/gitops-config
    targetRevision: HEAD
    path: services/auth
    helm:
      valueFiles:
      - values.yaml
      - values-production.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: neo-services
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - Validate=false

---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: neo-infrastructure
  namespace: neo-argocd
spec:
  project: neo-services
  source:
    repoURL: https://github.com/neo-service-layer/gitops-config
    targetRevision: HEAD
    path: infrastructure
  destination:
    server: https://kubernetes.default.svc
    namespace: neo-infrastructure
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - Validate=false

---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: argocd-vs
  namespace: neo-argocd
spec:
  hosts:
  - argocd.neo-service-layer.com
  gateways:
  - neo-infrastructure/neo-service-gateway
  http:
  - match:
    - uri:
        prefix: "/"
    route:
    - destination:
        host: neo-argocd-server
        port:
          number: 80
    timeout: 30s