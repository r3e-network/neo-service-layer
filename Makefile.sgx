# SGX and Rust Build Extension for Neo Service Layer
# This Makefile extends the main Makefile with Rust SGX build targets

# Variables
CARGO := cargo
RUSTC := rustc
SGX_SDK := /opt/intel/sgxsdk
SGX_MODE := SIM
RUST_SGX_SDK := rust-sgx-sdk
ENCLAVE_DIR := src/Tee/NeoServiceLayer.Tee.Enclave
ENCLAVE_NAME := neo-service-enclave
TARGET_DIR := target

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m

# Check for Rust installation
RUST_INSTALLED := $(shell command -v cargo 2> /dev/null)

.PHONY: all-with-sgx build-sgx build-rust-enclave test-sgx clean-sgx check-rust check-sgx

# Main target that includes SGX
all-with-sgx: build build-sgx test test-sgx
	@echo "$(GREEN)✅ Complete build with SGX components finished$(NC)"

# Check Rust installation
check-rust:
ifndef RUST_INSTALLED
	@echo "$(RED)❌ Rust is not installed. Please install Rust from https://rustup.rs/$(NC)"
	@exit 1
else
	@echo "$(GREEN)✅ Rust is installed: $(shell cargo --version)$(NC)"
endif

# Check SGX SDK
check-sgx:
	@if [ ! -d "$(SGX_SDK)" ]; then \
		echo "$(YELLOW)⚠️  Intel SGX SDK not found at $(SGX_SDK)$(NC)"; \
		echo "$(YELLOW)   Building in simulation mode$(NC)"; \
	else \
		echo "$(GREEN)✅ SGX SDK found at $(SGX_SDK)$(NC)"; \
	fi

# Build Rust SGX enclave
build-rust-enclave: check-rust
	@echo "$(BLUE)🦀 Building Rust SGX enclave...$(NC)"
	@cd $(ENCLAVE_DIR) && \
	if [ -f "Cargo.toml" ]; then \
		echo "  Building $(ENCLAVE_NAME)..."; \
		$(CARGO) build --release 2>&1 | tee ../../logs/rust-build.log; \
		if [ $$? -eq 0 ]; then \
			echo "$(GREEN)  ✅ Rust enclave built successfully$(NC)"; \
		else \
			echo "$(RED)  ❌ Rust enclave build failed$(NC)"; \
			exit 1; \
		fi \
	else \
		echo "$(YELLOW)  ⚠️  No Cargo.toml found in $(ENCLAVE_DIR)$(NC)"; \
	fi

# Build all SGX components
build-sgx: check-sgx build-rust-enclave
	@echo "$(BLUE)🔐 Building SGX components...$(NC)"
	@echo "  Mode: $(SGX_MODE)"
	
	# Build C# TEE Host
	@echo "  Building TEE Host..."
	@$(DOTNET) build src/Tee/NeoServiceLayer.Tee.Host/NeoServiceLayer.Tee.Host.csproj \
		--configuration $(CONFIGURATION) \
		--verbosity quiet
	
	# Build C# TEE Enclave wrapper
	@echo "  Building TEE Enclave wrapper..."
	@$(DOTNET) build src/Tee/NeoServiceLayer.Tee.Enclave/NeoServiceLayer.Tee.Enclave.csproj \
		--configuration $(CONFIGURATION) \
		--verbosity quiet
	
	@echo "$(GREEN)✅ SGX components built successfully$(NC)"

# Test SGX components
test-sgx: build-sgx
	@echo "$(BLUE)🧪 Testing SGX components...$(NC)"
	
	# Run Rust tests
	@if [ -f "$(ENCLAVE_DIR)/Cargo.toml" ]; then \
		echo "  Running Rust enclave tests..."; \
		cd $(ENCLAVE_DIR) && $(CARGO) test --release 2>&1 | tee ../../logs/rust-test.log; \
	fi
	
	# Run SGX simulation tests if available
	@if [ -f "scripts/sgx/run-sgx-tests-docker.sh" ]; then \
		echo "  Running SGX simulation tests..."; \
		bash scripts/sgx/run-sgx-tests-docker.sh 2>&1 | tee logs/sgx-test.log; \
	fi
	
	@echo "$(GREEN)✅ SGX tests completed$(NC)"

# Clean SGX build artifacts
clean-sgx:
	@echo "$(YELLOW)🧹 Cleaning SGX artifacts...$(NC)"
	@if [ -d "$(ENCLAVE_DIR)/target" ]; then \
		rm -rf $(ENCLAVE_DIR)/target; \
		echo "  Cleaned Rust build artifacts"; \
	fi
	@if [ -d "src/Tee/NeoServiceLayer.Tee.Host/bin" ]; then \
		rm -rf src/Tee/NeoServiceLayer.Tee.Host/bin; \
		rm -rf src/Tee/NeoServiceLayer.Tee.Host/obj; \
	fi
	@if [ -d "src/Tee/NeoServiceLayer.Tee.Enclave/bin" ]; then \
		rm -rf src/Tee/NeoServiceLayer.Tee.Enclave/bin; \
		rm -rf src/Tee/NeoServiceLayer.Tee.Enclave/obj; \
	fi
	@echo "$(GREEN)✅ SGX cleanup completed$(NC)"

# Build everything including SGX (extended version of 'all')
build-all-extended: clean restore build build-sgx
	@echo "$(GREEN)✅ Extended build completed (including SGX)$(NC)"

# Test everything including SGX
test-all-extended: test test-sgx
	@echo "$(GREEN)✅ Extended tests completed (including SGX)$(NC)"

# Performance check for SGX
perf-sgx:
	@echo "$(BLUE)⚡ Checking SGX performance...$(NC)"
	@echo "  Enclave initialization time..."
	@echo "  Attestation generation time..."
	@echo "  Secure computation throughput..."
	@# Add actual performance tests here
	@echo "$(GREEN)✅ SGX performance check completed$(NC)"

# Info about SGX setup
info-sgx:
	@echo "$(BLUE)ℹ️  SGX Build Information$(NC)"
	@echo "  SGX Mode: $(SGX_MODE)"
	@echo "  SGX SDK: $(SGX_SDK)"
	@echo "  Enclave Directory: $(ENCLAVE_DIR)"
	@echo "  Rust Version: $(shell cargo --version 2>/dev/null || echo 'Not installed')"
	@echo "  Target Architecture: $(shell uname -m)"
	@echo ""
	@echo "  Rust Projects:"
	@find . -name "Cargo.toml" -type f | while read -r cargo; do \
		dir=$$(dirname "$$cargo"); \
		name=$$(grep "^name" "$$cargo" | cut -d'"' -f2); \
		echo "    - $$name ($$dir)"; \
	done
	@echo ""
	@echo "  To build with SGX support:"
	@echo "    make -f Makefile.sgx build-sgx"
	@echo "  To run extended build:"
	@echo "    make -f Makefile.sgx all-with-sgx"

# Help for SGX targets
help-sgx:
	@echo "$(BLUE)SGX Build Targets:$(NC)"
	@echo "  make -f Makefile.sgx build-sgx        - Build SGX and Rust components"
	@echo "  make -f Makefile.sgx test-sgx         - Test SGX components"
	@echo "  make -f Makefile.sgx clean-sgx        - Clean SGX artifacts"
	@echo "  make -f Makefile.sgx all-with-sgx     - Complete build with SGX"
	@echo "  make -f Makefile.sgx info-sgx         - Show SGX configuration"
	@echo "  make -f Makefile.sgx perf-sgx         - Run SGX performance tests"