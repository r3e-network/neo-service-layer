// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  plan          Plan      @default(FREE)
  
  // Profile fields
  username      String?   @unique
  bio           String?
  website       String?
  location      String?
  company       String?
  
  // Settings
  preferences   Json?
  settings      Json?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  apiKeys       ApiKey[]
  deployments   Deployment[]
  interactions  ServiceInteraction[]
  bookmarks     Bookmark[]
  comments      Comment[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Custom models for Neo Service Layer

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  
  // Project settings
  network     Network  @default(TESTNET)
  status      ProjectStatus @default(ACTIVE)
  
  // Configuration
  config      Json?
  environment Json?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deployments Deployment[]
  interactions ServiceInteraction[]
  
  @@map("projects")
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  hashedKey   String
  
  // Permissions
  permissions Json?
  scopes      String[]
  
  // Usage tracking
  usageCount  Int      @default(0)
  lastUsedAt  DateTime?
  
  // Expiration
  expiresAt   DateTime?
  
  // Status
  isActive    Boolean  @default(true)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

model Deployment {
  id            String   @id @default(cuid())
  name          String
  
  // Contract details
  contractName  String
  contractHash  String?
  
  // Network information
  network       Network
  blockHeight   BigInt?
  transactionId String?
  
  // Status
  status        DeploymentStatus @default(PENDING)
  error         String?
  
  // Configuration
  config        Json?
  environment   Json?
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deployedAt    DateTime?
  
  // Relations
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  interactions  ServiceInteraction[]
  
  @@map("deployments")
}

model ServiceInteraction {
  id            String   @id @default(cuid())
  
  // Service details
  serviceName   String
  method        String
  parameters    Json?
  
  // Response
  response      Json?
  success       Boolean  @default(false)
  error         String?
  
  // Performance
  duration      Int?     // milliseconds
  gasUsed       String?
  
  // Timestamps
  createdAt     DateTime @default(now())
  
  // Relations
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId     String?
  project       Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  deploymentId  String?
  deployment    Deployment? @relation(fields: [deploymentId], references: [id], onDelete: SetNull)
  
  @@map("service_interactions")
}

model Bookmark {
  id          String   @id @default(cuid())
  
  // Bookmark details
  title       String
  url         String
  description String?
  tags        String[]
  category    String?
  
  // Metadata
  icon        String?
  preview     String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("bookmarks")
}

model Comment {
  id          String   @id @default(cuid())
  
  // Content
  content     String
  path        String   // Page/section path
  
  // Status
  isPublished Boolean  @default(true)
  isSpam      Boolean  @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId    String?
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentReplies")
  
  @@map("comments")
}

// Analytics and monitoring
model Analytics {
  id          String   @id @default(cuid())
  
  // Event details
  event       String
  path        String?
  
  // User info (optional, for logged-in users)
  userId      String?
  userAgent   String?
  ip          String?
  country     String?
  
  // Metadata
  metadata    Json?
  
  // Timestamp
  createdAt   DateTime @default(now())
  
  @@map("analytics")
}

// Enums
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum Network {
  MAINNET
  TESTNET
  PRIVATE
}

enum ProjectStatus {
  ACTIVE
  PAUSED
  ARCHIVED
  DELETED
}

enum DeploymentStatus {
  PENDING
  DEPLOYING
  DEPLOYED
  FAILED
  CANCELLED
}