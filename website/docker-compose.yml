version: '3.8'

services:
  # Neo Service Layer Website
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: neo-service-layer-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@db:5432/neo_service_layer
    env_file:
      - .env.production.local
    depends_on:
      db:
        condition: service_healthy
    networks:
      - neo-network
    volumes:
      - web-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: neo-service-layer-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=neo_service_layer
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - neo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: neo-service-layer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - web
    networks:
      - neo-network

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: neo-service-layer-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - neo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  neo-network:
    driver: bridge

volumes:
  postgres-data:
  web-data:
  nginx-cache:
  redis-data: