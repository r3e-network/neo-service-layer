<Project>
  <PropertyGroup>
    <AnalysisLevel>latest</AnalysisLevel>
    <EnforceCodeStyleInBuild>false</EnforceCodeStyleInBuild>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" Version="9.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!-- SGX and Occlum Build Targets -->
  
  <!-- Validate SGX SDK Installation -->
  <Target Name="ValidateSGXSDK" BeforeTargets="Build" Condition="'$(EnableSGXSupport)' == 'true' AND ($(MSBuildProjectName.Contains('Tee')) OR $(MSBuildProjectName.Contains('Enclave')))">
    <Message Text="Validating SGX SDK installation..." Importance="high" />
    <Message Text="SGX_SDK: $(SGX_SDK)" Importance="normal" />
    <Message Text="SGX_MODE: $(SGX_MODE)" Importance="normal" />
    <Message Text="SGX_DEBUG: $(SGX_DEBUG)" Importance="normal" />
    
    <!-- Check if SGX SDK exists on Linux -->
    <Warning Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true' AND !Exists('$(SGX_SDK)')" 
             Text="SGX SDK not found at $(SGX_SDK). Install Intel SGX SDK or set SGX_SDK environment variable. Continuing with simulation mode..." />
    
    <!-- Check if SGX SDK exists on Windows -->
    <Warning Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true' AND !Exists('$(SGX_SDK)')" 
             Text="SGX SDK not found at $(SGX_SDK). Install Intel SGX SDK or set SGX_SDK environment variable. Continuing with simulation mode..." />
  </Target>

  <!-- Build Rust Enclave Components -->
  <Target Name="BuildRustEnclave" BeforeTargets="Build" Condition="'$(EnableOcclumSupport)' == 'true' AND $(MSBuildProjectName.Contains('Enclave')) AND Exists('$(MSBuildProjectDirectory)/Cargo.toml')">
    <Message Text="Building Rust enclave components..." Importance="high" />
    
    <!-- Set Rust environment variables -->
    <PropertyGroup>
      <RustBuildMode Condition="'$(Configuration)' == 'Debug'">debug</RustBuildMode>
      <RustBuildMode Condition="'$(Configuration)' == 'Release'">release</RustBuildMode>
      <CargoFlags Condition="'$(Configuration)' == 'Release'">--release</CargoFlags>
    </PropertyGroup>
    
    <!-- Build Rust project -->
    <Exec Command="cargo build $(CargoFlags)" 
          WorkingDirectory="$(MSBuildProjectDirectory)" 
          EnvironmentVariables="SGX_MODE=$(SGX_MODE);SGX_SDK=$(SGX_SDK);RUST_LOG=$(OCCLUM_LOG_LEVEL)" 
          ContinueOnError="true" />
    
    <Message Text="Rust enclave build completed" Importance="normal" />
  </Target>

  <!-- Copy Native Libraries -->
  <Target Name="CopyNativeLibraries" AfterTargets="Build" Condition="'$(EnableTEESupport)' == 'true' AND ($(MSBuildProjectName.Contains('Tee')) OR $(MSBuildProjectName.Contains('Enclave')))">
    
    <!-- Check if we're in CI environment -->
    <PropertyGroup>
      <IsCI Condition="'$(CI)' == 'true' OR '$(TEST_ENVIRONMENT)' == 'CI'">true</IsCI>
      <IsCI Condition="'$(IsCI)' == ''">false</IsCI>
    </PropertyGroup>
    
    <Message Text="Copying native libraries for TEE support..." Importance="normal" />
    <Message Text="CI Environment detected: $(IsCI)" Importance="normal" Condition="'$(IsCI)' == 'true'" />
    
    <!-- Create native libraries directory -->
    <MakeDir Directories="$(OutputPath)runtimes/$(RuntimeIdentifier)/native" />
    
    <!-- Copy SGX libraries on Linux (skip in CI if files don't exist) -->
    <ItemGroup Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true' AND Exists('$(SGXLibraryPath)') AND '$(IsCI)' != 'true'">
      <SGXNativeLibraries Include="$(SGXLibraryPath)/libsgx_urts.so" />
      <SGXNativeLibraries Include="$(SGXLibraryPath)/libsgx_urts_sim.so" />
      <SGXNativeLibraries Include="$(SGXLibraryPath)/libsgx_uae_service.so" />
      <SGXNativeLibraries Include="$(SGXLibraryPath)/libsgx_uae_service_sim.so" />
    </ItemGroup>
    
    <!-- In CI: Only include SGX libraries that actually exist -->
    <ItemGroup Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true' AND '$(IsCI)' == 'true'">
      <SGXNativeLibraries Include="$(SGXLibraryPath)/libsgx_urts.so" Condition="Exists('$(SGXLibraryPath)/libsgx_urts.so')" />
      <SGXNativeLibraries Include="$(SGXLibraryPath)/libsgx_urts_sim.so" Condition="Exists('$(SGXLibraryPath)/libsgx_urts_sim.so')" />
      <SGXNativeLibraries Include="$(SGXLibraryPath)/libsgx_uae_service.so" Condition="Exists('$(SGXLibraryPath)/libsgx_uae_service.so')" />
      <SGXNativeLibraries Include="$(SGXLibraryPath)/libsgx_uae_service_sim.so" Condition="Exists('$(SGXLibraryPath)/libsgx_uae_service_sim.so')" />
    </ItemGroup>
    
    <!-- Copy SGX libraries on Windows -->
    <ItemGroup Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true' AND Exists('$(SGXLibraryPath)')">
      <SGXNativeLibraries Include="$(SGXLibraryPath)/sgx_urts.dll" />
      <SGXNativeLibraries Include="$(SGXLibraryPath)/sgx_urts_sim.dll" />
      <SGXNativeLibraries Include="$(SGXLibraryPath)/sgx_uae_service.dll" />
      <SGXNativeLibraries Include="$(SGXLibraryPath)/sgx_uae_service_sim.dll" />
    </ItemGroup>
    
    <!-- Copy Rust-built enclave library -->
    <ItemGroup Condition="Exists('$(MSBuildProjectDirectory)/target/$(RustBuildMode)/libneo_service_enclave.so')">
      <EnclaveLibraries Include="$(MSBuildProjectDirectory)/target/$(RustBuildMode)/libneo_service_enclave.so" />
    </ItemGroup>
    
    <!-- Perform the copy operations -->
    <Copy SourceFiles="@(SGXNativeLibraries)" 
          DestinationFolder="$(OutputPath)runtimes/$(RuntimeIdentifier)/native" 
          SkipUnchangedFiles="true" 
          Condition="@(SGXNativeLibraries->Count()) > 0" />
    
    <Copy SourceFiles="@(EnclaveLibraries)" 
          DestinationFolder="$(OutputPath)runtimes/$(RuntimeIdentifier)/native" 
          SkipUnchangedFiles="true" 
          Condition="@(EnclaveLibraries->Count()) > 0" />
    
    <Message Text="Native libraries copied to $(OutputPath)runtimes/$(RuntimeIdentifier)/native" Importance="normal" />
    <Message Text="SGX library copying skipped - files not found in CI environment" Importance="normal" Condition="'$(IsCI)' == 'true' AND @(SGXNativeLibraries->Count()) == 0" />
  </Target>

  <!-- Occlum Build Target -->
  <Target Name="BuildOcclumImage" AfterTargets="Build" Condition="'$(EnableOcclumSupport)' == 'true' AND $(MSBuildProjectName.Contains('Enclave')) AND Exists('$(MSBuildProjectDirectory)/Dockerfile.occlum')">
    <Message Text="Building Occlum LibOS image..." Importance="high" />
    
    <!-- Build Occlum Docker image -->
    <Exec Command="docker build -f Dockerfile.occlum -t neo-service-enclave:$(Configuration)-$(SGX_MODE) ." 
          WorkingDirectory="$(MSBuildProjectDirectory)" 
          EnvironmentVariables="SGX_MODE=$(SGX_MODE);OCCLUM_VERSION=$(OCCLUM_VERSION)" 
          ContinueOnError="true" />
    
    <Message Text="Occlum LibOS image build completed" Importance="normal" />
  </Target>

  <!-- Generate SGX Enclave Metadata -->
  <Target Name="GenerateEnclaveMetadata" AfterTargets="Build" Condition="'$(EnableSGXSupport)' == 'true' AND $(MSBuildProjectName.Contains('Enclave'))">
    <Message Text="Generating SGX enclave metadata..." Importance="normal" />
    
    <!-- Create metadata file -->
    <PropertyGroup>
      <EnclaveMetadataFile>$(OutputPath)enclave-metadata.json</EnclaveMetadataFile>
    </PropertyGroup>
    
    <ItemGroup>
      <EnclaveMetadata Include='{"build_info": {' />
      <EnclaveMetadata Include='"sgx_mode": "$(SGX_MODE)",' />
      <EnclaveMetadata Include='"sgx_debug": "$(SGX_DEBUG)",' />
      <EnclaveMetadata Include='"configuration": "$(Configuration)",' />
      <EnclaveMetadata Include='"platform": "$(RuntimeIdentifier)",' />
      <EnclaveMetadata Include='"build_time": "$([System.DateTime]::UtcNow.ToString(&quot;yyyy-MM-ddTHH:mm:ssZ&quot;))",' />
      <EnclaveMetadata Include='"occlum_version": "$(OCCLUM_VERSION)"' />
      <EnclaveMetadata Include='}}' />
    </ItemGroup>
    
    <WriteLinesToFile File="$(EnclaveMetadataFile)" 
                      Lines="@(EnclaveMetadata)" 
                      Overwrite="true" />
    
    <Message Text="Enclave metadata generated: $(EnclaveMetadataFile)" Importance="normal" />
  </Target>

  <!-- Clean SGX Build Artifacts -->
  <Target Name="CleanSGXArtifacts" BeforeTargets="Clean" Condition="'$(EnableTEESupport)' == 'true' AND ($(MSBuildProjectName.Contains('Tee')) OR $(MSBuildProjectName.Contains('Enclave')))">
    <Message Text="Cleaning SGX and Occlum build artifacts..." Importance="normal" />
    
    <!-- Remove Rust build artifacts -->
    <Exec Command="cargo clean" 
          WorkingDirectory="$(MSBuildProjectDirectory)" 
          ContinueOnError="true" 
          Condition="Exists('$(MSBuildProjectDirectory)/Cargo.toml')" />
    
    <!-- Remove native library directory -->
    <RemoveDir Directories="$(OutputPath)runtimes" ContinueOnError="true" />
    
    <!-- Remove metadata files -->
    <Delete Files="$(OutputPath)enclave-metadata.json" ContinueOnError="true" />
    
    <Message Text="SGX and Occlum artifacts cleaned" Importance="normal" />
  </Target>

  <!-- Validate TEE Dependencies -->
  <Target Name="ValidateTEEDependencies" BeforeTargets="Build" Condition="'$(EnableTEESupport)' == 'true' AND ($(MSBuildProjectName.Contains('Tee')) OR $(MSBuildProjectName.Contains('Enclave')))">
    <Message Text="Validating TEE dependencies..." Importance="normal" />
    
    <!-- Check for Rust installation -->
    <Exec Command="rustc --version" 
          ContinueOnError="true" 
          IgnoreExitCode="true" 
          ConsoleToMSBuild="true">
      <Output TaskParameter="ExitCode" PropertyName="RustExitCode" />
      <Output TaskParameter="ConsoleOutput" PropertyName="RustVersion" />
    </Exec>
    
    <Warning Condition="'$(RustExitCode)' != '0'" 
             Text="Rust compiler not found. Install Rust toolchain for Occlum LibOS support: https://rustup.rs/" />
    
    <Message Condition="'$(RustExitCode)' == '0'" 
             Text="Rust version: $(RustVersion)" 
             Importance="normal" />
    
    <!-- Check for Docker on non-Windows platforms -->
    <Exec Command="docker --version" 
          ContinueOnError="true" 
          IgnoreExitCode="true" 
          ConsoleToMSBuild="true"
          Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'false'">
      <Output TaskParameter="ExitCode" PropertyName="DockerExitCode" />
      <Output TaskParameter="ConsoleOutput" PropertyName="DockerVersion" />
    </Exec>
    
    <Warning Condition="'$(DockerExitCode)' != '0' AND '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'false'" 
             Text="Docker not found. Install Docker for Occlum LibOS container support." />
    
    <Message Condition="'$(DockerExitCode)' == '0'" 
             Text="Docker version: $(DockerVersion)" 
             Importance="normal" />
  </Target>

</Project>
